"Atari VCS Checkers Rev A Source Code"
Re-typed by White Flame (the .pdf's OCR was useless)

This file is reindented by the accompanying python script into hopefully a
character-for-character match of the scans.

Typo and formatting corrections to match the scans are appreciated.
Mistakes and inconsistencies found in the original are replicated here.
Code bytes are elided for now, I'd like to autogenerate them back in once it builds.
Or I might type them, too.  Who knows.

Random notes follow, content starts at "START".  Some "[todo - ...]" lines exist




https://twitter.com/KaySavetz/status/1248011083308134404
https://archive.org/details/VCScheckersA/page/n1/mode/2up
https://atariage.com/forums/topic/305206-carol-shaws-checkers-source-code/?tab=comments#comment-4504844
https://atariage.com/forums/topic/305210-original-source-for-video-checkers/?tab=comments#comment-4504866


;TEXT
;;TEXT
;;;TEXT
;;;;TEXT
should become
                        ;TEXT (aligned with label)
                        ;       TEXT (aligned with cmd)
                        ;               TEXT (aligned with parameter)
                        ;                                 TEXT (aligned with right comment's semicolon)
*=$80
F818,F828 indented differently!  it's 8 more to the right, so this all might be tab-based
F98E is not extra indented, though?

.IF and .ENDIF on p4 pdf, "CHECKERS EQUATES"

A full page has 11 green stripes. Each stripe & span between is 3 lines, so 66 physical lines total. 60 logical of file text on a page. Layout:
  (physical line 1)
  Title

|
| first line of file (logical line 1, physical line 5)
| ...

  ...
| last line of file (logical line 60, physical line 64)
|
| (physical line 66)
TODO - verify vertical spacing, especially each page transition in the scan

00B5 seems to be the longest line, omits a space after period, might be the max. somewhat of an indicator of where the hard margins are
after F9FD is long, too
FBE0 is truncated, closer to right chit than left side, real margin with no linewrap?

verify that all lines starting with fxxx are incrementing, and end up with bytes that match the binary if the next one moves forward.  repeated addresses means no bytes were there.

"*=*-1/256+1/256" is a page alignment hack, also indicitave of there being no operator precedence

VCS CHECKERS BY CAROL SHAW 5/15/80 9:41 AM
START
.TITLE  "VCS CHECKERS BY CAROL SHAW 15/15/80 9:41 AM" 
;; [Retyped by White Flame 2020-04-11]
0000 PAL = 0 ;0 => NTSC, 1=> PAL VERSION
0000 PRNT = 0 ;0 => ROM,  1=> DEBUG VERSION WHICH PRINTS ON TI TERMINAL
0000 STACK = 0 ;0 => NORMAL ALPHA-BETA "STACK",
F000 ROMSTR = $F000 ;ROM START ADDR
;
;;DK1:SCHKG.SRC 
;;COPYRIGHT ATARI, 1980
;;STARTED 10/1/79 
;
;;THE ALPHA-BETA PRUNING ALGORITHM USED HEREIN IS BASED ON THE LISP 
;;PROGRAM ON PAGE 321 OF "ARTIFICIAL INTELLIGENCE" BY PATRICK HENRY 
;;WINSTON, 1977, ADDISON-WESLEY PUBLISHING COMPANY, INC. PHILIPPINES.
;;ALSO ON "SOME STUDIES IN MACHINE LEARNING USING THE GAME OF CHECKERS", 
;;BY A. L. SAMUEL, PARTS I AND II, IN THE IBM JOURNAL OF RESEARCH AND DEVELOPMENT, 
;;JULY 1959 AND NOVEMBER 1967.  PART I IS ALSO IN "COMPUTERS AND THOUGHT", 
;;BY EDWARD A. FEIGENBAUM AND JULIAN FELDMAN, PP.71-105, 1963, MCGRAW-HILL. 
;
;
;;STELLA (TIA) REGISTER ADDRESSES
;
%rcomment 1
0000 VSYNC = $00  ;BIT        1  VERTICAL SYNC SET-CLR    1=>START
0001 VBLANK = $01 ;BIT  76    1  VERTICAL BLANK SET-CLR, PORT CONTROL (INPT0-INPT5)
0002 WSYNC = $02  ;STROBE        WAIT FOR HORIZ BLANK
0003 RSYNC = $03  ;STROBE        RESET HORIZ SYNC COUNTER
0004 NUSIZ0 = $04 ;BITS   54 210 NUMBER-SIZE PLAYER/MISSILE 0
0005 NUSIZ1 = $05 ;BITS   54 210 NUMBER-SIZE PLAYER/MISSILE 1
0006 COLUP0 = $06 ;BITS 7654321  COLOR(4)-LUM(3) PLAYER 0
0007 COLUP1 = $07 ;BITS 7654321  COLOR(4)-LUM(3) PLAYER 1
0008 COLUPF = $08 ;BITS 7654321  COLOR(4)-LUM(3) PLAYFIELD
0009 COLUBK = $09 ;BITS 7654321  COLOR(4)-LUM(3) BACKGROUND
000A CTRLPF = $0A ;BITS   54 210 PLAYFIELD CONTROL & BALL
000B REFP0  = $0B ;BIT      3    REFLECT PLAYER 0. 1=>REFLECT
000C REFP1 = $0C  ;BIT      3    REFLECT PLAYER 1
000D PF0 = $0D    ;BITS 7654     PLAYFIELD REG BYTE 0 (REVERSED)
000E PF1 = $0E    ;BITS ALL      PLAYFIELD REG BYTE 1
000F PF2 = $0F    ;BITS ALL      PLAYFIELD REG BYTE 2 (REVERSED)
0010 RESP0 = $10  ;STROBE        RESET PLAYER 0
0011 RESP1 = $11  ;STROBE        RESET PLAYER 1
0012 RESM0 = $12  ;STROBE        RESET MISSILE 0
0013 RESM1 = $13  ;STROBE        RESET MISSILE 1
0014 RESBL = $14  ;STROBE        RESET BALL
0015 AUDC0 = $15  ;BITS     3210 AUDIO CONTROL 0
0016 AUDC1 = $16  ;BITS     3210 AUDIO CONTROL 1
0017 AUDF0 = $17  ;BITS     3210 AUDIO FREQUENCY 0
0018 AUDF1 = $18  ;BITS     3210 AUDIO FREQUENCY 1
0019 AUDV0 = $19  ;BITS     3210 AUDIO VOLUME 0
001A AUDV1 = $1A  ;BITS     3210 AUDIO VOLUME 1
001B GRP0 = $1B   ;BITS ALL      GRAPHICS FOR PLAYER 0
001C GRP1 = $1B   ;BITS ALL      GRAPHICS FOR PLAYER 1
001D ENAM0 = $1D  ;BIT        1  ENABLE MISSILE 0.  1=> ENABLE
001E ENAM1 = $1E  ;BIT        1  ENABLE MISSILE 1
001F ENABL = $1F  ;BIT        1  ENABLE BALL
0020 HMP0 = $20   ;BITS 7654     HORIZ MOTION PLAYER 0.  0-7 => LEFT
0021 HMP1 = $21   ;BITS 7654     HORIZ MOTION PLAYER 1.  F-8 => RIGHT
0022 HMM1 = $22   ;BITS 7654     HORIZ MOTION MISSILE 0
0023 HMM2 = $23   ;BITS 7654     HORIZ MOTION MISSILE 1
0024 HMBL = $24   ;BITS 7654     HORIZ MOTION BALL
0025 VDELP0 = $25 ;BIT         0 VERTICAL DELAY PLAYER 0.  1=> VDEL ON
0026 VDELP1 = $26 ;BIT         0 VERTICAL DELAY PLAYER 1
0027 VDELBL = $27 ;BIT         0 VERTICAL DELAY BALL
0028 RESMP0 = $28 ;BIT        1  RESET MISSILE TO PLAYER 0.  1-> MISSILE RESET TO PLAYER
0029 RESMP1 = $29 ;BIT        1  RESET MISSILE TO PLAYER 1
002A HMOVE = $2A  ;STROBE        ACT ON HORIZ MOTION
002B HMCLR = $2B  ;STROBE        CLEAR ALL HM REGISTERS
002C CXCLR = $2C  ;STROBE        CLEAR COLLISION LATCHES
;;
;;READ ADDRESSES - BITS 7 & 6 ONLY
;;
0030 CXM0P = $30 ;M0*P1  M0*P0
0031 CXM1P = $31 ;M1*P0  M1*P1
0032 CXP0FB = $32 ;P0*PF  P0*BL
0033 CXP1FB = $33 ;P1*PF  P1*BL
0034 CXM0FB = $34 ;M0*PF  M0*BL
0035 CXM1FB = $35 ;M1*PF  M1*BL
0036 CXBLPF = $36 ;BL*PF
0037 CXPPMM = $37 ;P0*P1  M0*M1
0038 INPT0 = $38 ;POT 0.  BIT7=1 => POT CAPACITOR IS COMPLETELY CHARGED?
0039 INPT1 = $39 ;POT 1
003A INPT2 = $3A ;POT 2
003B INPT3 = $3B ;POT 3
003C INPT4 = $3C ;JOYSTICK 0 BUTTON.  B7=0 => BUTTON PRESSED
003D INPT5 = $3D ;JOUSTICK 1 BUTTON
;;
;;PIA AND TIMER (6532) LOCATIONS
;;
0280 SWCHA = $280 ;P0,P1 JOYSTICKS (RLDU,RLDU), POT TRIGGERS, KEYBOARD, DRIVING CONTROLLER
0281 CTLSWA = $281 ;SWCHA I/O CONTROL      1-OUTPUT
0282 SWCHB = $282 ;CONSOLE SWITCHES (READ ONLY) P1B,P0B,X,X,B/W,X,SELECT,RESET IF 0
0283 CTLSWB = $283 ;UNUSED
0284 INTIM = $284 ;INTERVAL TIMER INPUT   0=>TIMER UP
0294 TIM1T = $294 ;TIMER OUTPUT:  1 MACHINE CYCLE/TICK (.838 MICROSEC)
0295 TIM8T = $295 ;8 MACHINE CYCLES/TICK
0296 TIM64T = $296 ;64 MC'S/TICK
0297 T1024T = $297 ;1024 MACHINE CYCLES/TICK (858.2 MICROSECONDS)
;;
;;KIM SUBROUTINES
;;
1E2F CRLF = $1E2F ;PRINT CRLF ON TI
1E3B PRTBYT = $1E3B ;PRINT ACCUMULATOR IN HEX ASCII ON TI
1E5A GETCH = $1E5A ;READ ASCII CHAR FROM TI INTO A
1E9E OUTSP = $1E9E ;PRINT SPACE ON TI
1EA0 OUTCH = $1EA0 ;PRINT ACCUMULATOR AS ASCII CHAR ON TI
1F9D GETBYT = $1F9D ;READ TWO HEX ASCII CHARS FROM TI INTO A
^L
;;;CHECKERS EQUATES
%rcomment 2
000B MAXMAX = 11 ;MAX STACK DEPTH FOR ALPHA-BETA
.IF STACK
MAXMAX = 22
.ENDIF

0009 JMPLEN = 9 ;LENGTH OF JMPTBL (LIST OF JUMPED PIECES)

0010 LINCHR = 16 ;# OF LINES/CHAR
0000 EMPTY = 0 ;EMPTY SQUARE INDEX INTO CHARACTER TABLE
0010 CHECKER = 1*LINCHR
0020 KING = 2*LINCHR
0300 CURS = 3*LINCHR

00AA BLANK = 10*16+10 ;TWO BLANK CHARS
00BB JP = 11*16+11 ;"JP"

0000 CLP0 = 0 ;PLAYER 0 (HUMAN, LEFT JOYSTICK)
0080 CLP1 = $80 ;PLAYER 1 (COMPUTER, RIGHT PLAYER)

0010 HUMCHK = CLP0+CHECKER ;HUMAN CHECKER (NOT KING)
0020 HUMKNG = CLP0+KING ;HUMAN KING
0030 HUMCRS = CLP0+CURS ;HUMAN CURSOR
0090 CMPCHK = CLP1+CHECKER ;COMPUTER CHECKER
00A0 CMPKNG = CLP1+KING ;COMPUTER KING
00B0 CMPCRS = CLP1+CURS ;COMPUTER CURSOR

0005 HMIN = 5 ;MIN. GAMNO FOR HARD BOARD COLORS

0036 DARK = $36 ;DARK CHECKER COLOR/LUM
000C LIGHT = $0C ;LIGHT CHECKER COLOR/LUM
0000 EDARK = 0 ;EASY DARK SQUARE COLOR.  0 IS ACTUALLY USED INSTEAD OF EDARK
0034 ELIGHT = $34 ;EASY LIGHT SQUARE COLOR (RED)
0036 ELIAT = $36 ;EASY LIGHT IF ATTRACT
00B0 HDARK = $B0 ;HARD DARK SQUARE COLOR (GREEN)
0026 HLIGHT = $26 ;HARD LIGHT SQUARE COLOR (BUFF OR CREAM OR WHITE)
0026 HLIAT = $26 ;HARD LIGHT SQUARE IF ATTRACT
000C LTCHR = $0C ;LIGHT CHAR COLOR
0092 DRKCHR = $92 ;DARK CHARACTER COLOR
002D GSCON = 45 ;GAME SELECT TIMER INITIAL VALUE
0025 OVRCON = $25 ;OVERSCAN TIMER INITIAL VALUE
002C VBLCON = 44 ;VBLANK TIMER INITIAL VALUE
001E VBTIM = 30 ;1/2 SEC. VBLANK AFTER CALCULATION -- CHANGE FOR PAL
002D FRZTIM = 45 ;FREEZE TIMER FOR END OF HUMAN MOVE

;;
;;PAL VERSIONS OF THE ABOVE
;;
.IF PAL
DARK = $66 ;DARK CHECKER COLOR/LUM
LIGHT = $0C ;LIGHT CHECKER COLOR/LUM
EDARK = 0 ;EASY DARK SQUARE COLOR
ELIGHT = $64 ;EASY LIGHT SQUARE COLOR (RED)
ELIAT = $66 ;EASY LIGHT IF ATTRACT
HDARK = $50 ;HARD DARK SQUARE COLOR (GREEN)
HLIGHT = $46 ;HARD LIGHT SQUARE COLOR (BUFF OR CREAM OR WHITE)
HLIAT = $46 ;HARD LIGHT SQUARE IF ATTRACT
LTCHR = $0C ;LIGHT CHAR COLOR
DRKCHR = $B2 ;DARK CHARACTER COLOR
GSCON = 38 ;GAME SELECT TIMER INITIAL VALUE
OVRCON = $2B ;OVERSCAN TIMER INITIAL VALUE
VBLCON = $36 ;VBLANK TIMER INITIAL VALUE
VBTIM = $32 ;1/2 SEC. VBLANK AFTER CALCULATION -- CHANGE FOR PAL
FRZTIM = 38 ;FREEZE TIMER FOR END OF HUMAN MOVE
.ENDIF


FFFB RB = -5 ;SQUARE # OFFSET FOR RIGHT BACKWARD (DOWN) MOVEMENT
FFFC LB = -4 ;                    LEFT  BACKWARD
0004 RF = 4  ;                    RIGHT FORWARD
0005 LF = 5  ;                    LEFT FORWARD

0010 PLAY2 = $10 ;TWO-PLAYER GAME # IN DECIMAL

0036 DROP = $36 ;PIECE DROPPING SOUND FOR AUDV0
0030 PICKUP = $30 ;PIECE PICKUP SOUND FOR AUDV0
0004 PURE2 = 4 ;PURE TONE/4 FOR AUDC0
000F ERRSND = 15 ;ERROR SOUND FOR AUDC0

0008 MLT = $08 ;MULTIPLE JUMP MASK
0004 MST = $04 ;MUST JUMP MASK

0004 CORN = 4 ;DOUBLE CORNER CREDIT

0008 ENDPC = 4*2 ;MIN NUMBER OF HUMAN PIECES FOR NON-END GAME

0020 ADDTRM = $20 ;TERM TO ADD TO MAGNITUDE OF SCORE IF STACK IS FULL IN TERMNODE
^L
;;;;VARIABLES (RAM PAGE ZERO)
*=$80
;;;;THE FOLLOWING RAM LOCS ARE CLEARED DURING RESET:
;A-B MEANS USED BY ALPHA-BETA PRUNING ROUTINE
;SAVE MEANS ALPHA-BETA PRUNING ROUTINE DOES NOT ALTER
0080 ZROBGN
0080 BOARD
*=*+35 ;CHECKER BOARD (1 BYTE / SQUARE) SQUARES 8,17,26 ARE NOT USED. A-B
00A3 PIECE
*=*+1 ;CURRENT PIECE BEING MOVED. A-B

00A4 JMPI
*=*+1 ;INDEX INTO JMPLIST --  <0 => NO JUMPS. A-B
00A5 MSTJMP
*=*+1 ;0 => ACTIVE PLAYER CAN'T JUMP   4 => ACTIVE PLAYER MUST JUMP.  A-B
00A6 MLTJMP
*=*+1 ;8 => CONTINUING MULTIPLE JUMP. A-B & MAIN
00A7 MSTFLG
*=*+1 ;MSTJMP SAVED WHILE NEW MSTJMP IS COMPUTED. A-B
00A8 MLTFLG
*=*+1 ;MLTJMP BACKUP. A-B

00A9 HPIECE
*=*+1 ;HUMAN PIECE COUNT.  KING=3, CHECKER=2. A-B
00AA CPIECE
*=*+1 ;COMPUTER PIECE COUNT. A-B

00AB CURSOR
*=*+1 ;SQUARE # FOR BLINKING CURSOR. SAVE
00AC FROMB
*=*+1 ;BINARY "FROM" SQUARE (INTERNAL NUMBERING). A-B
00AC TOSQRB
*=*+1 ;BINARY "TO" SQUARE.  A-B

00AE HKING
*=*+1 ;HUMAN KING COUNT
00AF CKING
*=*+1 ;COMPUTER KING COUNT (1 FOR EACH KING)

00B0 ZROEND
;
;;;;THE FOLLOWING RAM LOCS ARE NOT CLEARED DURING RESET
;
; GAMNO = 1 TO GMAX2 IN DECIMAL
;       1-9             REGULAR CHECKERS
;       10              2-PLAYER (EITHER)
;       11-19           GIVE-AWAY (LOSING)
00B0 GAMNO
*=*+1 ;GAME NUMBER
00B1 COLHUM
*=*+1 ;HUMAN CHECKER COLOR (NO ATTRACT ADDED IN). SAVE
00B2 COLCMP
*=*+1 ;COMPUTER CHECKER COLOR (NO ATTRACT ADDED IN). SAVE?
;
00B3 T0
*=*+1 ;TEMP (USED IN  KERNEL, ETC.). A-B & MAIN
00B4 T1
*=*+1 ;TEMP (USED IN KERNEL, ETC.). A-B & MAIN
00B4 XSAVE = T1 ;X REG SAVED FOR JMPCHK ROUTINE. A-B & MAIN
00B5 T2
*=*+1 ;A-B & MAIN
00B5 YSAVE = T2 ;. A-B & MAIN
00B5 NUM = T2 ;2 BYTE NUMERATOR FOR STATIC EVALUATION DIVIDE (USED FOR RATIO OF PIECE COUNTS).A-B
00B6 T3
*=*+1 ;A-B & MAIN
00B6 ANYMVE = T3 ;>0 => ACTIVE PLAYER CAN MOVE. A-B & MAIN -- USED ONLY BY JMPCHK
00B7 T6
*=*+1 ;ANOTHER TEMP
00B8 DEN
*=*+1 ;DENOMINATOR. A-B
00B9 T7
*=*+1 ;TEMP
00BA T8
*=*+1 ;YET ANOTHER TEMP -- USED TO SAVE BK COLOR

00BB ACTIVE
*=*+1 ;ACTIVE OR CURRENT PLAYER (HUMAN=0, COMPUTER=$80). A-B & MAIN
00BC DEPTH
*=*+1 ;CURRENT DEPTH OF TREE SEARCH. A-B & SET UP BY MAIN

00BD JMPSQR
*=*+1 ;SQUARE # FOR PIECE BEING JUMPED. A-B
00BE INDEX
*=*+1 ;CURRENT OFFSET INDEX (0-3). A-B
00BF FRSMOV
*=*+1 ;$80 => FIRST MOVE (MAY BE MULTIPLE JUMP). A-B
;;B7=1 => FIRST MOVE, B6=1 => FIRST MOVE AT THIS LEVEL, BETTER MOVE FOUND [todo - misaligned in original?]
00C0 XMOVE
*=*+1 ;"FROM" MOVE SQUARE FROM MOVCHK. A-B & MAIN
00C1 TIMOUT
*=*+1 ;TIMER

00C2 OLDPBQ
*=*+1 ;SWCHB FOR THIS FRAME.
00C3 FRAME
*=*+1 ;FRAME COUNTER -- COUNTS UP.
00C4 PRNCNT
*=*+1 ;B7=1 => PRUNE (FOR MULTIPLE JUMPS).  B6-B0 = RANDOM MOVE COUNTER

00C5 JMPLST
*=*+JMPLEN ;SQUARES FOR PIECES JUMPED BY COMPUTER, <0 => KING. A-B & MAIN
00CE JMPEND
;
;;THE FOLLOWING ALPHA-BETA "STACK" OVERLAP THE MAIN PROGRAM VARS WHICH
;;ARE LISTED LAST.  THEY ALSO OVERLAP JMPLST WITH THE EXCEPTION OF THE FIRST 3 BYTES.
;
*=JMPLST+3
.IF STACK
AX=*
*=$180
.ENDIF ;ALLOW FOR BIGGER STACK IF DEBUG
00C8 FROMT
*=*+MAXMAX ;FROM(I-1) = FROM SQUARE FOR DEPTH I. A-B
;;B7=1 => FIRST MOVE, B6=1 => FIRST MOVE AT THIS LEVEL, BETTER MOVE FOUND
00D3 OTHER
*=*+MAXMAX ;OTHER(I-1) = OTHER FOR DEPTH I. A-B
; B7-6 = CAPTURED PIECE, B5-4 = MOVED PIECE, B3 = MLTJMP, B2 = MSTJMP, B1-0 = OFFSET INDEX
00DE ALPHAL
*=*+MAXMAX+1+1 ;ALPHAL(I) = ALPHA(DEPTH) LSB. A-B
00EB ALPHAH
*=*+MAXMAX+1+1 ;ALPHAH(I) = ALPHA(DEPTH)/256. A-B
00F8 ALPEND

.IF STACK
*=AX
.ENDIF

;
;;;;THE FOLLOWING VARS OVERLAP THE ALPHA-BETA "STACK" AND T4-SCRRPF:
;
*=JMPLST+JMPLEN
00CE COLP0
*=*+1 ;COLOR OF P0 (ATTRACT ADDED IN)
00CF COLP1
*=*+1 ;COLOR OF P1

00D0 COL0
*=*+2 ;COLOR OF 1ST PIECE IN ROW (FOR KERNEL ONLY)
00D2 COL1
*=*+2
00D4 COL2
*=*+2
00D6 COL3
*=*+2

00D8 PNTR0
*=*+2 ;POINTERS TO SQUARE GRAPHICS
00DA PNTR1
*=*+2
00DC PNTR2
*=*+2
00DE PNTR3
*=*+2

00E0 SQUARE
*=*+1 ;SQUARE # FOR USE IN KERNEL
00E1 SQREND
;
;;THE FOLLOWING PARTIALLY OVERLAP BOTH THE ALPHA-BETA "STACK" AND
;;COLP0-SQUARE.
;
*=JMPLST+JMPLEN
00CE T4
*=*+1
00CF T5
*=*+1

00D0 SCRLP0
*=*+5 ;P0 "SCORE" GRAPHICS
00D5 SCRRP1
*=*+5 ;P1
00DA SCRLPF
*=*+5 ;LEFT PF1 GRAPHICS
00DF SCRRPF
*=*+5 ;RIGHT PF1 GRAPHICS

00E4 MOVVAL
*=*+1 ;VALUE IN MOVE SQUARE. SET UP AT END OF A-B. DON'T SAVE
00E5 MOVFLG
*=*+1 ;1 => DISPLAY COMPUTER'S MOVE. DON'T SAVE
00E6 WINSAV
*=*+1 ;WINNING PLAYER, 0=> NO WIN. DON'T SAVE
00E7 FROMTO
*=*+1 ;0 => FROM, 1=> TO. DON'T SAVE

00E8 CURSC
*=*+1 ;COMPUTER CURSOR. SET UP AT END OF A-B. DON'T SAVE
00E9 MOVE
*=*+1 ;CURRENT MOVE. SET UP AT END OF A-B. DON'T SAVE
00EA OLDINP
*=*+1 ;JOYSTICK BUTTON VALUE FOR CURRENT PLAYER FOR LAST FRAME. DON'T SAVE
00EB GSTIM
*=*+1 ;GAME SELECT TIMER -- COUNTS DOWN TO 0. DON'T SAVE

00EC OLDPB6
*=*+1 ;OLD SWCHB VALUE, 0=>NORMAL, <>0=>SETUP (BIT 6 ONLY). DON'T SAVE
00ED ILEGAL
*=*+1 ;>0 => MAKE ILLEGAL MOVE SOUND. DON'T SAVE
00EE ATIM
*=*+1 ;ATTRACT MODE TIMER -- COUNTS UP. DON'T SAVE
00EF GFLG2
*=*+1 ;0=>ATTRACT  <> 0 => NOT ATTRACT. DON'T SAVE
00F0 BLNKTM
*=*+1 ;FRAME COUNTER FOR VBLANK AFTER CALCULATION(DOWN TO 0). DON'T SAVE
00F1 SNDTIM
*=*+1 ;TIMER FOR SOUNDS (COUNTS DOWN TO 0). DON'T SAVE
00F2 FREEZE
*=*+1 ;TIMER FOR FREEZE AFTER HUMAN MOVE (0=END OF FREEZE)
00F3 COLSQ
*=*+1 ;SQUARE COLOR FOR KERNEL


00F4 FROM
*=*+1 ;FROM SQUARE FOR "SCORE" . DON'T SAVE
00F5 TOSQR
*=*+1 ;TO SQUARE FOR "SCORE". DON'T SAVE
00F6 SCP0
*=*+1 ;GAME # FOR "SCORE". SAVE
00F7 SCP1
*=*+1 ;# OF PLAYERS FOR "SCORE". DON'T SAVE


;;;;F8-FF ARE USED FOR STACK (4 LEVELS DEEP FOR NOW)
^L
;;;;SCORE KERNEL (TOP LINE OF CHARS)
*=ROMSTR
.IF PRNT
*=$E000 ;RELOCATE IF DEBUG TO MAKE ROOM FOR MORE CODE
JMP PSTART
.ENDIF

F000 JMPBAK
F000 A2 04 LDX #5-1 ;5 BYTES PER CHARACTER
F002 SCOR2
;;;;MACHINE CYCLE COUNTS ARE GIVEN
F002 A0 02 LDY #2 ;50 49  REPEAT EACH BYTE TWICE
F004 SCOR3
F004 85 02 STA WSYNC ;47 53 46 52
F006 B5 DA LDA SCRLPF,X ;4
F008 85 0E STA PF1 ;7  GAME # (AT LEFT)
F00A B5 D0 LDA SCRLP0,X ;11
F00C 85 1B STA GRP0 ;14 "FROM" SQUARE
F00E B5 D5 LDA SCRRP1,X ;18
F010 85 1C STA GRP1 ;21 "TO" SQUARE


F012 A9 00 LDA #0 ;23 MISSILE 0 FOR DASH BETWEEN "FROM" AND "TO"
F014 E0 02 CPX #2 ;25  X=0 ON LAST TIME THROUGH SO CARRY IS CLEAR
F016 D0 01 BNE SCOR4 ;27 28
F018 8A TXA ;29 X=2
F019 SCOR4
F019 85 1D STA ENAM0 ;32 31

F01B B5 DF LDA SCRRPF,X ;36 35
F01D 88 DEY ;38 37
F01E 85 0E STA PF1 ;41 40 # OF PLAYERS (AT RIGHT)
F020 D0 E2 BNE SCOR3 ;44 43 43 42

F022 CA DEX
F023 10 DD BPL SCOR2 ;48 47 46  X=$FF  Y=0
^L
;;CHECKERBOARD KERNEL
;
;;;;X=$FF    Y=0
;;;;CARRY IS CLEAR => LAST SQUARES AT LEFT,
;;;;NEXT SQUARES AT RIGHT.
F025 A5 F3 LDA COLSQ ;49
F027 85 02 STA WSYNC ;52
F029 85 07 STA COLUP1 ;3   SET UP P1 COLOR FOR TOP RIGHT OF TOP RIGHT SQUARE
F02B A9 31 LDA #$31 ;5  8 CLOCK BALL, REFLECT PLAYFIELD
F02D 85 0A STA CTRLPF ;8
F02F 84 0E STY PF1 ;11
F031 84 1B STY GRP0 ;14
F033 84 1C STY GRP1 ;17
;;;;SET HORIZONTAL POSITION OF PLAYERS, MISSILE AND BALL
F035 A9 E0 LDA #$E0 ;19  2 TO RIGHT
F037 85 24 STA HMBL ;22
F039 8A TXA ;24  INIT MSG'S OF CHAR POINTERS FOR KERNEL  ($FF)  [todo - hex omitted from here forward, autogen from bins]
F03A STA HMM1 ;27  $FX -- 1 TO RIGHT
F03C STA PNTR0+1 ;30
F03E STA RESP1 ;33     POSITION PLAYER 1 (P1)  (MUST OCCUR AT THIS TIME)
F040 LDX #6    ;35     NOTE THAT RESET TAKES 4-6 CLOCKS
F042 STX NUSIZ0 ;38  3 COPIES OF PLAYER, MEDIUM SEPARATION
F044 STY HMP1 ;41  Y=0
F046 STA RESP0 ;44     POSITION P0 (MUST OCCUR AT THIS TIME)
F048 LDX #$30 ;46
F04A STX NUSIZ1 ;49  8 CLOCK MISSILE, 1 COPY OF PLAYER 0
F04C STA PNTR1+1 ;52
F04E STA PNTR2+1 ;55
F050 STA PNTR3+1 ;58
F052 LDA #$10 ;60  1 TO LEFT
F054 STA HMP0 ;63
F056 STA RESBL ;66     POSITION BALL (MUST OCCUR AT THIS TIME)
F058 STA RESM1 ;69     POSITION MISSILE #1
F05A STA WSYNC ;72 0
F05C STA HMOVE ;3 MOVE OBJECTS A FEW CLOCKS FOR EXACT POSITIONING
F05E LDA T8 ;CHANGE BK COLOR
F060 STA COLUBK ;IF B/W
F062 STA WSYNC ;12
F064 STA HMCLR ;3
F066 LDA #$C0 ;5
F068 STA HMP1 ;8   4 TO RIGHT
F60A STA HMP0 ;11

F06C LDY #35-4 ;13  START AT TOP LEFT OF BOARD -- BOARD(31) TO BOARD(35)

;
;;DISPLAY NEXT ROW OF CHECKERS
;
F06E LOOP1
F06E STY SQUARE ;16 25
F070 LDX #3*2 ;18 27  SET UP COLORS AND GRAPHICS FOR 4 CHECKERS IN THIS ROW
;
;;SET UP GRAPHICS IN RAM
;
F072 KRNLP
F072 LDA BOARD,Y ;4
F075 BMI KRN10 ;6 7
F077 STA PNTR0,X ;10  HUMAN PIECE OR EMPTY
F079 LDA COLP0 ;13
F07B JMP KRN15 ;16
F07E LOOP15 BCS LOOP20 ;34  FOR LOOP2 DELAY

F080 KRN10
F080 AND #$7F ;9  COMPUTER PIECE
F082 STA PNTR0,X ;13
F084 LDA COLP1 ;16
F086 KRN15
F086 STA COL0,X ;20 20
F088 INY ;22
F089 DEX ;24
F08A DEX ;26
F08B BPL KRNLP ;29  4*29-1=115 M.C.'S
;
;;MIN = 18+115+3 = 136 = 76+60
;;MAX = 27+115+3 = 145 = 76+69
;
.IF PAL ;PUT TWO EXTRA LINES AT BOTTOM OF SQUARE IF PAL
JSR WAIT2 ;DO 2 WSYNC'S. JSR & RTS EACH TAKE 6 MC'S
.ENDIF
F08D STA WSYNC ;3
F08F STA HMOVE ;3  MOVE PLAYERS 4 MORE CLOCKS (RIGHT OR LEFT)
;;;;SET UP BALL AND PLAYFIELD
F091 BCS K100 ;5 6
F093 SEC ;7  CS => AT RIGHT
F094 LDA #$C3 ;9  PLAYFIELD 2
F096 LDX #3 ;11  PF1
F098 LDY #2 ;13  ENABLE BALL
F09A BCS K110 ;16  JMP
F09C K100
F09C CLC ;8  CC => AT LEFT
F09D LDA #$3C ;10  PLAYFIELD 2
F09F TAX ;12  PF1
F0A0 LDY #0 ;14 DISABLE BALL
F0A2 K110
F0A2 STA PF2 ;19 17
F0A4 STX PF1 ;22
F0A6 STY ENAM1 ;25
F0A8 STY ENABL ;28

F0AA STA WSYNC ;31 29  MOVE 4 MORE CLOCKS
F0AC STA HMOVE ;3
.IF PAL ;PUT TWO EXTRA LINES AT BOTTOM OF SQUARE IF PAL
JSR WAIT3 ;DO 3 WSYNC'S. JSR & RTS EACH TAKE 6 MC'S
.ENDIF
.IF PAL-1
F0AE STA WSYNC ;6 0   WAIT 1 MORE LINE
.ENDIF
F0B0 LDA #$40 ;2      4 TO LEFT
F0B2 BCS K130 ;4 5
F0B4 LDA #$C0 ;6      4 TO RIGHT
F0B6 K130
F0B6 STA HMP0 ;9 8
F0B8 STA HMP1 ;12 11

F0BA LDY #LINCHR-1 ;14 13

;;;;DISPLAY ONE ROW OF CHECKER BOARD
;
;;DISPLAY NEXT TV LINE
;
F0BC LOOP2
F0BC STA WSYNC ;16 15 72 76 0  WAIT FOR NEXT LINE
F0BE LDA COL0 ;3 STORE COLOR AND GRAPHICS FOR LEFT CHECKER
F0C0 STA COLUP1 ;6
F0C2 LDA (PNTR0),Y ;11
F0C4 STA GRP1 ;14

F0C6 LDA COL1   ;17  STORE COLOR AND GRAPHICS FOR NEXT CHECKER
F0C8 STA COLUP0 ;20
F0CA LDA (PNTR1),Y ;25
F0CC STA GRP0 ;28

F0CE BCS LOOP15 ;30 31     4 EXTRA MACHINE CYCLES IF CARRY SET (SQUARES SHIFTED TO RIGHT)
F0D0 LOOP20
F0D0 LDA COLSQ ;33 37  LOAD DARK SQUARE COLOR
F0D2 STA COLUP1 ;36 40

F0D4 LDX COL2 ;39 43  STORE COLOR & GRAPHICS FOR NEXT CHECKER
F0D6 LDA (PNTR2),Y ;44 48
F0D8 STX COLUP0 ;47 51  TIMING IS CRITICAL FROM HERE TO NEXT WSYNC
F0DA STA GRP0 ;50 54

F0DC LDX COL3 ;53 57  STORE COLOR & GRAPHICS FOR RIGHT CHECKER
F0DE LDA (PNTR3),Y ;58 62
F0E0 STA GRP0 ;61 65
F0E2 STX COLUP0 ;64 68

F0E4 DEY ;66 70
F0E5 BPL LOOP2 ;69 73 68 72    CONTINUE FOR REST OF LINES IN THIS ROW OF SQUARES

;;;;MOVE TO RIGHT OR LEFT 16 CLOCKS FOR NEXT ROW
;;;;(4 CLOCKS/MOVE * 4 MOVES)    Y=$FF
F0E7 STA WSYNC ;71 75
F0E9 STA HMOVE ;3  EXECUTE MOVE
F0EB INY ;5  Y=0
F0EC STY GRP1 ;8
F0EE STY GRP0 ;11

F0F0 STA WSYNC ;14 0
F0F2 STA HMOVE ;3  MOVE SOME MORE

F0F4 PHP ;6 SAVE CARRY
F0F5 LDA SQUARE  ;9
F0F7 SBC #4 ;11  SUBTRACT 5 IF CARRY IS CLEAR (COMPENSATES FOR BOARD NUMBERING)
F0F9 PLP ;15  RESTORE CARRY
F0FA TAY ;17

F0FB BMI FRAMLP ;19
F0FD JMP LOOP1 ;22  CONTINUE
;;;;END OF KERNELS
^L

;;INITIALIZATION

F100 PSTART SEI ;DISABLE INTERRUPTS
F101 CLD ;BINARY ARITHMETIC
F102 LDX #0
F104 TXA

F105 INLP STA 0,X ;CLEAR HARDWARE REGISTERS AND RAM
F107 INX
F108 BNE INLP

F10A DEX ;$FF
F10B TXS ;INIT STACK PTR

.IF PRNT
STA PRFLG ;0 -- CLEAR PRINT FLAGS IF DEBUG
STA PRDEP
STA PRCNT
.ENDIF

F10C INC GAMNO ;1

F10E LDA SWCHB ;SAVE INITIAL PORT REAING
F111 STA OLDPBQ
F113 AND #$40
F115 STA OLDPB6
F117 LDX #$30
F119 STX AUDF1 ;FOR WIN SOUND
F11B INX
F11C STX CTRLPF ;$31: 8 CLOCK BALL, REFLECT PLAYFIELD
F11E LDX #4
F120 STX AUDC1

F122 JSR RESET ;SET UP BOARD
^L
;;;;END OF FRAME -- RESTORE BOARD AFTER DISPLAY
F125 FRAMLP
.IF PAL ;TWO EXTRA LINES AT BOTTOM OF BOTTOM SQUARE IF PAL
JSR WAIT3 ;DO 3 WSYNC'S AND RETURN
.ENDIF
.IF PAL-1
F125 STA WSYNC ;ANOTHER LINE AT BOTTOM OF BOARD IF NOT PAL
.ENDIF
F127 LDX #OVRCON
F129 STA WSYNC
F12B STX TIM64T ;SET TIMER FOR OVERSCAN (? LINES)
F12E LDX #0
F130 STX PF2 ;CLEAR PLAYFIELD
F132 STX PF1


F134 INC FRAME
F136 BNE FRMLP2
F138 INC ATIM
F13A BNE FRMLP2
F13C LDA #0 ;GO INTO ATTRACT
F13E STA GFLG2
F140 FRMLP2
F140 LDA MOVFLG
F142 BEQ FRAM10 ;NO COMPUTER MOVE

;;;;COMPUTER MOVE IS BEING DISPLAYED --- RESTORE
F144 CLC
F145 JSR JMPSET ;CLEAR OUT JUMPED PIECES, IF ANY
F148 LDX CURSC
F14A LDA #0
F14C STA BOARD,X
F14E FRAM10
F14E LDX MOVE ;"TO"
F150 LDA MOVVAL
F152 STA BOARD,X

F154 LDX CURSOR ;"FROM"
F156 LDA PIECE
F158 STA BOARD,X ;RESTORE CURRENT SQUARE


F15A LDA BLNKTM ;STILL BLANKING AT END OF COMPUTER MOVE?
F15C BNE BLKJMP ;YES. SKIP


F15E LDA SWCHB ;NO. SAVE NEW CONSOLE SWITCH PORT VALUE
F161 TAX ;IN OLDPBQ BUT DON'T CHANGE OLDPB6 YET.
F162 EOR OLDPBQ
F164 STX OLDPBW
F166 BPL NOREV ;NO CHANGE IN BIT 7 OF OLDPBQ
^L
;;RIGHT DIFFICULTY SWITCH MOVED MEANS TO REVERSE BOARD (SWITCH SIDES)
;
;;;;MOVE CURSOR, FROMB, TOSQRB
F168 LDX #2
F16A LDA TOSQRB
F16C BMI SW10 ;NO "TO" SQUARE
F16E SWLP
F16E LDA #34
F170 SEC
F171 SBC CURSOR,X
F173 STA CURSOR,X
F175 SW10
F175 DEX
F176 BPL SWLP

F178 LDA #34 ;CHANGE CURSC, MOVE
F17A SEC
F17B SBC CURSC
F17D STA CURSC
F17F LDA #34
F181 SEC
F182 SBC MOVE
F184 STA MOVE


;;;;SWITCH SIDES FOR EACH PIECE ON BOARD, PIECE
F186 LDX #34+1
F188 NORLP
F188 LDA BOARD,X
F18A BEQ NOR05
F18C EOR #$80
F18E STA BOARD,X
F190 NOR05
F190 DEX
F191 BPL NORLP

F193 LDA MOVVAL ;SWITCH MOVVAL
F195 BEQ NOR06
F197 EOR #$80
F199 STA MOVVAL
F19B NOR06
;;;;REVERSE BOARD
F19B LDX #16
F19D LDY #0 ;0 TO 16 (17 IS UNUSED), 18-34

F19F BSWLP
F19F LDA BOARD+18,X
F1A1 PHA
F1A2 LDA BOARD,Y
F1A5 STA BOARD+18,X
F1A7 PLA
F1A8 STA BOARD,Y
F1AB INY
F1AC DEX
F1AD BPL BSWLP

F1AF JSR SWIT ;REVERSE ACTIVE
F1B2 LDA COLHUM ;SWITCH COLORS
F1B4 LDX COLCMP
F1B6 STX COLHUM
F1B8 STA COLCMP

F1BA LDA HPIECE ;SWITCH HPIECE & CPIECE
F1BC LDX CPIECE
F1BE STX HPIECE
F1C0 STA CPIECE

F1C2 LDA HKING ;SWITCH HKING & CKING
F1C4 LDX CKING
F1C6 STX HKING
F1C8 STA CKING

F1CA NOREV


F1CA JSR GSRST
^L
;;;;BEGINNING OF FRAME -- CHECK FOR SET UP MODE
F1CD BLKJMP
F1CD LDA #3 ;B6=0 => DISABLE LATCHES, B1=1 => START VSYNC & VBLANK
F1CF OVSLP LDX INTIM ;WAIT FOR END OF OVERSCAN
F1D2 BNE OVSLP
;;;;START VERTICAL BLANK
F1D4 STA WSYNC
F1D6 STA VSYNC ;START VERTICAL SYNC
F1D7 STA VBLANK
F1DA STX AUDC0 ;NO SOUND
F1DC STA CTRLPF ;STORE 3 -- SCORE, REFLECT PLAYFIELD
F1DE STA WSYNC
F1E0 STA WSYNC
F1E2 LDY #VBLCON ;37 LINES
F1E4 STA WSYNC
F1E6 STX VSYNC ;END VERTICAL SYNC (X=0)
F1E8 STY TIM64T

F1EB LDA BLNKTM
F1ED BEQ NOBL
F1EF JMP ATTR10 ;DO NOTHING
F1F2 NOBL

;;;;CHECK FOR SETUP MODE (LEFT PRO/AM SWITCH UP (=1))
F1F2 LDA OLDPBQ
F1F4 LDX OLDPB6
F1F6 BNE STUP25
F1F8 AND #$40 ;PREVIOUSLY IN NORMAL MODE
F1FA BNE STUP10
;
;;STILL IN NORMAL MODE  (NORMAL -> NORMAL)
;
F1FC LDA WINSAV
F1FE BEQ COMP05 ;NO WIN
;
;;SOMEONE HAS WON -- OUTPUT WIN SOUND
;
F200 LDX GFLG2
F202 BEQ WIN70 ;ATTRACT MODE
F204 DEC SNDTIM
F206 LDX SNDTIM
F208 STX GFLG2 ;0=> DONE WITH SOUND, DO ATTRACT
F20A BEQ WIN60
F20C LDX FRAME
F20E WIN60
F20E STX AUDV1
F210 WIN70
F210 JMP CRSBLK

;
;;CHECK FOR COMPUTER OR HUMAN MOVE
;
F213 COMP05
F213 LDX GAMNO
F215 LDA FREEZE ;FREEZE DISPLAY AFTER MOVE?
F217 BEQ COMP06 ;NO. CONTINUE
F218 DEC FREEZE ;FREEZE OVER YET?
F21B BNE WIN70 ;NO. JMP CRSBLK
F21D CPX #PLAY2
F21F BNE COMP07
F221 JSR JMPWIN ;CHECK FOR JUMP.  GAME OVER?
F224 BEQ STUP50 ;YES
F226 LDA CURSOR
F227 LDX CURSC ;REVERSE COMPUTER AND HUMAN CURSORS
F22A STA CURSC
F22C STX CURSOR
F22E LDA BOARD,X
F230 STA PIECE
F232 JSR TOSET ;CLEAR TOSQRB, MOVFLG
F235 JMP ATTR10

F238 COMP06
F238 CPX #PLAY2
F23A BEQ COMP10 ;2-PLAYER GAME
F23C COMP07
F23C LDX ACTIVE
F23E BMI CMPMVE ;COMPUTER'S MOVE
F240 COMP10
F240 JMP NOCHCK ;2-PLAYER GAME OR HUMAN'S MOVE
F243 CMPMVE
F243 JSR JMPWIN ;SET UP MSTJMP, XMOVE, YMOVE,  ETC.
F246 BEQ STUP50 ;GAME OVER -- GOTO ATTR10
F248 BNE COMPUT ;JMP    DEFINITELY DO COMPUTER'S MOVE


;
;;CHANGE TO SETUP MODE (NORMAL -> SETUP)
;
F24A STUP10
F24A STA OLDPB6
F24C JSR MOVCLR ;SET MOVE TO OFF BOARD SQUARE
F24F JSR TONORM ;NOT SOFT ATTRACT (RETURNS Y=$FF)
F252 STY JMPI ;$FF -- NO JUMPS FOR COMPUTER
F254 JSR TOSET ;SET UP TOSQRB, MOVFLG, RETURN Y=0, EQ
F257 STY AUDV1 ;CLEAR WIN SOUND
F259 STY FROMTO
F25B STY MSTJMP ;NO JUMP
F25D BEQ STUP30 ;JMP

;
;;PREVIOUSLY IN SETUP MODE
;
F25F STUP25
F25F AND #$40
F261 STA OLDPB6


F263 STUP30
F263 JSR CRSTUP ;SET UP ACTIVE, COLHUM,COLCMP

F266 LDX CURSOR
F268 LDA BOARD,X ;CURSOR SQUARE DETERMINES STARTING PLAYER AFTER SET UP
F26A BEQ STUP35 ; UNLESS EMPTY-- USE RIGHT DIFFICULTY SWITCH FROM CRSTUP
F26C AND #$80
F26E STA ACTIVE
F270 STUP35
F270 LDX #0
F272 STX WINSAV
F274 STX MOVFLG ;NO COMPUTER MOVE
F276 LDX OLDPB6
F278 BNE COMP10 ;GOTO NOCHCK IF STILL IN SETUP (NORMAL->SETUP OR SETUP->SETUP)
;
;;OUT OF SETUP (SETUP -> NORMAL)
;
.IF PRNT
JSR PRBRD
.ENDIF

F27A JSR TONORM ;MAKE SURE WE'RE NOT IN ATTRACT MODE
F27D LDX GAMNO
F27F CPX #PLAY2 ;TWO-PLAYER GAME?
F281 BEQ STUP49 ;YES.
F283 LDA ACTIVE ;NO.    COMPUTER PLAYER?
F285 BMI STUP50 ;YES.
F287 STUP49
F287 JSR JMPWIN ;CHECK FOR JUMPS, MOVES, WINS FOR HUMAN PLAYER
F28A STUP50
F28A JMP ATTR10 ;SKIP THE REST UNTIL NEXT TIME
^L
;;CALL ALPHA-BETA PRUNING ROUTINE
;;THIS IS A "RECURSIVE" TREE SEARCH.
;;TO SAVE SPACE, THE STACK IS NOT USED.  INSTEAD, TH EROUTINE RETURNS
;;TO ABRET1 IF DEPTH=1 AND OTHERWISE RETURNS TO ITSELF.
;;EVENTUALLY, WE WANT TO CHECK TO SEE IF THERE IS ONLY ONE POSSIBLE MOVE
;;FIRST, FOR FASTER RESPONSE.
;
F28D COMPUT
F28D LDX #1
F28F STX DEPTH ;START AT DEPTH=1
F291 STX ALPHAL+0
F293 STX ALPHAL+1
F295 DEX ;0
F296 STX MLTJMP ;NOT MULTIPLE JUMP YET
F298 STX VBLANK ;MAKE SURE VBLANK IS OFF
F29A STX PRNCNT ;CLEAR PRUNE FLAG AND BEST MOVE COUNTER

F29C LDA #$80 ;ALPHA(0) = ALPHA(1) = $8001 = -INFINITY
F29E STA ALPHAH+0
F2A0 STA ALPHAH+1
F2A2 STA FRSMOV ;FIRST MOVE -- NO BETTER MOVE YET


;
;;IF RESET PRESSED THEN PICK OPENING MOVE AT RANDOM
;
F2A4 LDA OLDPBQ
F2A6 ROR A ;RESET SWITCH PRESSED?
F2A7 BCS COMPU2 ;NO.
F2A9 LDA FRAME ;YES. PICK FROM 7 OPENING MOVES
F2AB AND #7 ;AT RANDOM (22-19) IS TWICE AS LIKELY AS THE OTHERS). [todo - first close paren is likely an original typo]
F2AD TAX
F2AE LDA FRSTAB,X
F2B1 STA JMPLST
F2B3 AND #$3F
F2B5 STA FROMB
F2B7 STA CURSC
F2B9 JMP NOJUMP ;JMP
F2BC COMPU2
^L
;
;;ALPHBETA -- ALPHA-BETA PRUNING ROUTINE  -- PUT INLINE TO SAVE A FEW BYTES
;
;;CALL BY JMP ALPHBETA, NOT JSR
;;IF DEPTH = 1 THEN RETURN IS BY JMP ABRET1,
;;OTHERWISE, JMP ABRET2.
;
F2BC ALPHBETA
;
;;CHANGE COLORS IF TIMER UP
;
.IF PRNT
LDA INPT5 ;IS RIGHT JOYSTICK BUTTON PRESSED?
BMI AB05 ;NO.
JSR PAK ;YES.  INPUT NEW PRFLG FROM TI FOR DEBUG
AB05
.ENDIF

;
;;CHECK RESET SWITCH (DON'T CHECK GAME SELECT)
;
F2BC LDA SWCHB
F2BF ROR A ;RESET PRESSED?
F2C0 BCS AB50 ;NO.
F2C2 ROL A ;SHIFT A BACK
F2C3 JSR RSV2 ;YES.
F2C6 LDA #VBTIM
F2C8 STA BLNKTM
F2CA JMP NOREV ;GOTO CODE THAT DOES JSR GSRST



F2CD AB50
F2CD LDA MLTJMP ;SAVE MLTJMP AND MSTJMP
F2CF STA MLTFLG
F2D1 LDA MSTJMP
F2D3 STA MSTFLG

F2D5 LDX XMOVE ;USE MOVE DISCOVERED BY JMPCHK
;
;;TRY NEXT SQUARE
;
F2D7 ALOOP1
F2D7 LDA BOARD,X
F2D9 BEQ CON3J ;EMPTY -- TRY NEXT SQUARE
F2DB EOR ACTIVE
F2DD BPL ALPH05
F2DF CONT3J
F2DF JMP CONT3 ;OPPONENT'S PIECE -- TRY NEXT SQUARE
F2E2 ALPH05 STX FROMB ;ACTIVE -- SAVE SQUARE #
F2E4 JSR LOADY ;LOAD Y WITH 3 (OR  IF CMPCHK)
;
;;TRY NEXT INDEX
;
F2E7 ALPH10
F2E7 LDA BOARD,X
F2E9 STA PIECE ;SAVE CONTENTS OF SQUARE (PIECE BEING MOVED)
F2EB JSR ONBRD2 ;ADD MOVTAB OFFSET. ON BOARD?
F2EE BCS CONT2J ;NO.  TRY NEXT OFFSET
F2F0 TAX
F2F1 LDA MSTJMP
F2F3 BNE AJUMP ;MUST JUMP
^L
;
;;NO JUMP -- ORDINARY MOVE
;
F2F5 LDA BOARD,X ;IS "TO" SQUARE OCCUPIED?
F2F7 BNE CONT2J ;YES.  TRY NEXT OFFSET

F2F9 STX TOSQRB ;NO. HAVE POTENTIAL MOVE
F2FB STY INDEX ;SAVE TO SQUARE AND INDEX
F2FD LDA PIECE ;LOAD PIECE AND CHECK FOR NEW KING
F2FF JSR KNGCK2 ;CHANGES A AND PIECE COUNT IF NEW KING
F302 STA BOARD,X ;CHANGE TOSQR TO FROM SQUARE
F304 LDA #0 ;CLEAR FROM SQUARE
F306 LDX FROMB
F308 STA BOARD,X

F30A JSR TERMNODE ;CHECK FOR TERMINAL NODE
F30D BCS TER ;YES. -- TERMINAL

;
;;NOT TERMINAL NODE -- SAVE VARS. FOR THIS LEVEL
;
F30F LDA PIECE
F311 AND #$30 ;BIT 5-4 INDICATES KING OR CHECKER
F313 ORA INDEX ;BIT 1-0 IS MOVTAB INDEX (MSTJMP AND MLTJMP ARE 0)
F315 JSR SAVE1 ;SAVE OTHE, FROMT, INC DEPTH.  RETURN X=DEPTH
F13B JMP ALPJMP


;
;;TER -- ORDINARY MOVE -- NOT JMP -- TERMINAL NODE
;
F31B TER
F31B JSR SWIT
;
;;TAKE MOVE BACK
F31E JSR RESTOR
F321 LDA #0 ;MAKE SURE MSTJMP IS CLEAR BECAUSE IF AT MAXMAX DEPTH,.
;;;;THEN TERMNODE MIGHT HAVE DETECTED JUMP.
F323 STA MSTJMP
F325 JMP FINSH3 ;CHECK NEW STATIC VALUE, POSSIBLY MODIFY ALPHA
;
;;AJUMP -- MUST JUMP
;
F328 AJUMP
F328 LDA BOARD,X
F32A BEQ CONT2J ;EMPTY -- TRY NEXT OFFSET
F32C EOR ACTIVE
F32E BMI AJ05
F330 CONT2J
F330 JMP CONT2 ;ACTIVE PLAYER -- CAN'T JUMP OWN PIECE
F333 AJ05
F333 STX JMPSQR ;SAVE SQUARE WHICH WE ARE JUMPING OVER
F335 JSR ONBRD2 ;ADD MOVTAB OFFSET.  OFF BOARD?
F338 BCS CONT2J ;YES. TRY NEXT OFFSET
F33A TAX
F33B LDA BOARD,X
F33D BNE CONT2J ;TO SQUARE IS OCCUPIED -- TRY NEXT OFFSET

F33F STX TOSQRB ;SUCCESS -- SAVE SQUARE
F341 STY INDEX
F343 LDA PIECE
F345 JSR KNGCHK ;IF NEW KING THEN SET CARRY, INC PIECE COUNT & MODIFY MSTJMP
F348 STA BOARD,X ;STORE IN TO SQUARE
F34A LDY #0 ;CLEAR FROM SQUARE
F34C LDX FROMB
F34E STY BOARD,X
F350 LDX JMPSQR
F352 LDA BOARD,X
F354 ASL A ;SAVE JUMPED PIECE IN B7-6
F355 ASL A
F356 ORA JMPSQR ;COMBINE WITH JMP SQUARE
F358 STA JMPSQR
F35A STY BOARD,X ;CLEAR JUMP SQUARE 
F35C JSR CHGCNT ;CHANGE PIECE COUNTS




F35F LDA MSTJMP ;MUST JUMP?
F361 BEQ MJ05 ;NO -- NEW KING MUST STOP -- CHECK FOR NEW JUMP
F363 LDX TOSQRB
F365 JSR MOVCHK
F368 BCC MJ08 ;ANOTHER JUMP FOR THIS PIECE
^L
;
;;NEW KING OR END OF JUMP
;
F36A MJ05
F36A LDA #0 ;NOT MULTIPLE JUMP NEXT TIME
F36C STA MLTJMP

F36E JSR TERMNODE ;SWITCH PLAYERS -- CHECK FOR TERMINAL
;;;;SET UP XMOVE, MSTJMP FOR NEXT LEVEL
F371 BCS MJ07 ;TERMINAL
;;;;NOT TERMINAL
F373 JSR JMPSAV ;INC DEPTH & SAVE VARS   RETURN X=NEW DEPTH
F376 ALPJMP
F376 LDA ALPHAL-2,X
F378 STA ALPHAL,X
F37A LDA ALPHAH-2,X
F37C STA ALPHAH,X

F37E LDA #0
F380 STA FRSMOV ;NOT FIRST MOVE
F382 STA MLTJMP


F384 JMP ALPHBETA ;RECURSE

F387 MJ07
F387 JSR SWIT ;TERMINAL -- SWITCH ACTIVE BACK
F38A BCS MJ15 ;JMP

;
;;MULTIPLE JUMP -- MSTJMP ALREADY SET
;
F38C MJ08
F38C LDA #MLT
F38E STA MLTJMP
F390 JSR SWIT
F393 JSR ALP200 ;CHECK FOR MAXMAXDEPTH
F396 JSR SWIT
F399 BCC MJ20 ;OK - KEEP GOING
;
;;STACK FULL -- MUST STOP -- UNDO JUMP
;
F39B MJ15
F39B LDA JMPSQR
F39D AND #$3F
F39F TAX
F3A0 LDA JMPSQR

F3A2 JSR RESTR5 ;RESTORES MSTJMP, MLTJMP, ETC.

F3A5 FINSH3 ;CHECK NEW STATIC VALUE
^L
;
;;SAVE VARS -- MULTIPLE JUMP NEXT TIME
;
F3A8 MJ20
F3A8 JSR JMPSAV ;INC DEPTH & SAVE VARS (MSTFLG, MLTFLG, ETC.)

F3AB LDA FRSMOV
F3AD AND #$80 ;FIRST MOVE STAYS THE SAME, EXCEPT NO BETTER MOVE
F3AF STA FRSMOV

F3B1 LDA ALPHAL-1,X ;USE SAME ALPHA
F3B3 STA ALPHAL,X
F3B5 LDA ALPHAH-1,X
F3B7 STA ALPHAH,X

F3B9 LDA ALPHAL-2,X ;ALSO SAME BETA (PREVIOUS ALPHA)
F3BB STA ALPHAL-1,X
F3BD LDA ALPHAH-2,X
F3BF STA ALPHAH-1,X

F3C1 JMP ALPHBETA
^L
;
;;RETURN FROM RECURSIVE ALPHBETA CALL
;
;
;;RESTORE VARS
;
F3C4 ABRET2
F3C4 DEC DEPTH
F3C6 LDX DEPTH

F3C8 LDA FROMT-1,X
F3CA AND #$EF
F3CC STA FROMB
F3CE LDA OTHER-1,X
F3D0 AND #MLT
F3D2 STA MLTFLG
F3D4 LDA OTHER-1,X
F3D6 AND #MST
F3D8 STA MSTFLG
F3DA LDA OTHER-1,X
F3DC AND #3
F3DE STA INDEX

F3E0 LDA MSTFLG ;WAS MOVE A JMP?
F3E2 BNE WASJ ;YES.
;
;;NOT A JUMP
;
F3E4 JSR SWIT ;SWITCH ACTIVEPLAYER
F3E7 LDA MLTFLG ;NO. NOT JUMP
F3E9 STA MLTJMP
F3EB LDA MSTFLG
F3ED STA MSTJMP

F3EF LDA OTHER-1,X ;SET UP PIECE
F3F1 AND #$30
F3F3 ORA ACTIVE
F3F5 STA PIECE

F3F7 LDA FROMT-1,X
F3F9 AND #$C0
F3FB STA FRSMOV

F3FD LDA FROMB
F3FF LDY INDEX
F401 CLC
F402 ADC MOVTAB,Y
F405 STA TOSQRB
F407 JSR RESTOR ;RESTORE SOME VARS & BOARD
F40A JMP PRNJMP ;CLEAR PRUNE FLAG & CHECK NEW VALUE AGAINST ALPHA

;
;;WAS A JUMP
;
F40D WASJ
F40D LDY MLTJMP
F40D BNE WASJ10
;
;;WAS NOT A MULTIPLE JUMP
;
F411 JSR SWIT ;SWITCH ACTIVE PLAYER
F414 LDA FROMT-1,X
F416 JSR RESTR6 ;SET UP FRSMOV,PIECE,MSTJMP,MLTJMP, RESTORE BOARD
F419 PRNJMP
F419 ASL PRNCNT ;CLEAR PRUNE FLAG WITHOUT DISTURBING COUNTER
F14B CLC
F14C ROR PRNCNT
F14E JMP FINSH3

;
;;NEXT LEVEL CONTNUED MULTIPLE JUMP -- MOVE BETA & NEW ALPHA BACK
;
F421 WASJ10
.IFPRNT
LDA PRFLG
AND #$80 ;FLAG SET?
BEQ SKIP1 ;NO.
TXA ;YES.  SAVE X AND PRINT "MULTIPLE JUMP" MESSAGE
PHA
LDA #MJ
JSR BLECCH
PLA ;RESTORE X
TAX
SKIP1
.ENDIF

F421 LDA ALPHAL,X ;MOVE BETA
F423 STA ALPHAL-1,X
F425 LDA ALPHAH,X
F427 STA ALPHAH-1,X

F429 LDA ALPHAH+1,X ;MOVE ALPHA
F42B STA ALPHAH,X
F42D LDA ALPHAL+1,X
F42F STA ALPHAL,X

F431 LDA PRNCNT ;PRUNE?
F433 BPL NEW50 ;NO.

F435 JSR RESTR4 ;YES.  LEAVE FRSMOV AS IS.  RESTORE OTHER JUNK
F438 JMP ABD2 ;GOTO PRUNE
F34B NEW50

F43B BIT FRSMOV ;FIRST MOVE? (NEXT LEVEL)
F43D BPL SKIP2 ;NO.  BETTER MOVE?
F43F BVC SKIP2 ;NO.  DON'T SAVE MOVE BUT RESTORE JUNK
;
;;MULTIPLE JUMP -- FIRST MOVE & BETTER MOVE
;
;;KEEP FRSMOV & BETTER MOVE FROM PREVIOUS LEVEL (BOTH SET)
;
F441 WASJ17
F441 JSR JMPSV2

.IF PRNT
LDA PRFLG
AND #$40
BEQ SKIP2
LDA #MJBA ;"MULTIPLE JUMP - FIRST MOVE & BETTER ALPHA"
JSR BLECCH
.ENDIF

F444 SKIP2
F444 JSR RESTR4 ;SET UP PIECE,MSTJMP,MLTJMP,RESTORE BOARD
F447 JMP CONT1 ;SKIP ALPHA CHECKING AND DO NEXT INDEX
^L
;
;;CHECK NEW VALUE AGAINST ALPHA
;;MAY BE STATIC VALUE OR VALUE PASSED BACK BY CALL TO NEXT DEPTH.
;
;;HUMAN PASSES UP -C/H, COMPUTER TRIES TO MAXIMIZE +C/H (MAKE H SMALLER RELATIVE TO C).
;;COMPUTER PASSES UP +C/H, HUMAN TRIES TO MAXIMIZE -C/H (MAKE H LARGER RELATIVE TO C).
;
F44A FINSH3
;
;;IF -ALPHA(DEPTH+1) > ALPHA(DEPTH) THEN HAVE BETTER ALPHA.
;;I.E. IF ALPHA(DEPTH) + ALPHA(DEPTH+1) < 0 THEN HAVE BETTER ALPHA.
;
F44A LDX DEPTH

F44C BIT FRSMOV ;FIRST MOVE?
F44E BPL NEW10 ;NO.
F450 INC ALPHAL+1,X ;YES.  INCREASE -ALPHA BY 1 (TO MAKE RANDOMNESS WORK)
F452 BNE NEW10
F454 INC ALPHAH+1,X ;IF LSB WENT TO 0 THEN INC MSB
F456 NEW10

F456 LDA ALPHAL,X
F458 CLC
F459 ADC ALPHAL+1,X
F45B STA T0 ;SAVE LSB
F45D LDA ALPHAH,X
F45F ADC ALPHAH+1,X
F461 BVC FH5 ;OVERFLOW?
F463 LDA ALPHAH,X ;YES.  OVERFLOW -- LOAD SIGN
F465 FH5
F465 BMI FH7 ;NEGATIVE => HAVE BETTER ALPHA
;
;;NEW VALUE IS THE SAME AS OLD ALPHA OR WORSE
;
F467 BVS FH6 ;OVERFLOW SET -- NOT 0 -- WORSE
F469 BNE FH6 ;MSB NOT 0 -- WORSE
F46B BIT FRSMOV ;FIRST MOVE?
F46D BPL FH6 ;NO.  FORGET THIS MOVE
F46F LDA T0 ;NEW VALUE = ALPHA?
F471 BNE FH6 ;NO.  FORGET THIS MOVE

.IF PRNT
LDA PRFLG
AND #$02
BEQ SKIP7
LDY DEPTH
CPY PRDEP
BCS SKIP7 ;DON'T PRINT IF DEPTH>=PRDEP

LDA #RAN ;"RANDOM"
JSR OUTAL3
LDX DEPTH
SKIP7
.ENDIF

F473 LDA FRAME ;SUM IS 0  -- USE NEW VALUE AT "RANDOM"
F475 TAY ;MOVE OLD FRAME VALUE TO Y AND COMPUTE NEW VALUE
F476 BNE FRAQ
F478 LDA #$62 ;SET TO NEW VALUE IF 0
F47A STA FRAME
F47C FRAQ
F47C ROL A ;B7-> CARRY
F47D ROL FRAME ;B7 -> B0
F47F ROL A ;OLD B6 -> CARRY
F480 ROL A ;OLD B6-> B0
F481 AND #1
F483 EOR FRAME
F485 STA FRAME

F487 LDA PRNCNT ;LOAD COUNTER
F489 AND #$7F ;MASK OFF PRUNE FLAG
F48B CMP #5 ;EQUAL TO 5?
F48D BCS NEW40 ;YES.  LIMIT TO 5
F48F INC PRNCNT ;NO. INCREMENT EQUAL MOVE COUNTER
F491 NEW40
F491 TAX
F492 TYA
F493 CMP RANTAB,X ;IS RANDOM NUMBER < 1/2, 1/3, 1/4 ETC?
F496 BCC FHQ ;YES.  KEEP MOVE

;
;;NEW VALUE WAS THE SAME AND WE ARE NOT USING THIS MOVE OR
;;NEW VALUE WAS WORSE THAN THE OLD ALPHA.
;
F498 FH6
.IF PRNT
LDA PRFLG
AND #$20
BEQ SKIP3
LDA #WA ;"WORSE ALPHA"
JSR BLECCH
SKIP3
.ENDIF
F498 JMP CONT1
;
;;IF ALPHA >= BETA THEN PRUNE TREE -- OPPONENT WOULD NEVER LET US PICK THIS MOVE
;;I.E. IF ALPHA(DEPTH) + ALPHA(DEPTH-1) >= 0 THEN PRUNE TREE
;;BETA(DEPTH) = -ALPHA(DEPTH-1)
;
F49B FH7
;
;;NEGATE ALPHA+1 AND MOVE TO ALPHA (X=DEPTH ON INPUT)
;
F49B LDA #0 ;NEGATE AND MOVE NEW VALUE TO ALPHA
F49D SEC
F49E SBC ALPHAL+1,X
F4A0 STA ALPHAL,X
F4A2 LDA #0
F4A4 SBC ALPHAH+1,X
F4A6 STA ALPHAH,X

F4A8 LDA ALPHAL,X
F4AA LC
F4AB ADC ALPHAL-1,X
F4AD LDA ALPHAH,X
F4AF ADC ALPHAH-1,X
F4B1 BVC FH20
F4B3 LDA ALPHAH,X ;OVERFLOW -- LOAD SIGN
F4B5 FH20
F4B5 BPL ABD2 ;MOVE REJECTED => PRUNE

;
;;BEST MOVE SO FAR -- SAVE IN JMPLST IF FIRST MOVE.
;;RESULT OF ADDITION WAS NEGATIVE
;
F4B7 FHQ
F4B7 LDA FRSMOV
F4B9 ORA #$40 ;INDICATE BETTER MOVE
F4BB STA FRSMOV


.IF PRNT
BMI FHBLEC ;BRANCH IF FIRST MOVE
LDA PRFLG
AND #$10
BEQ SKIP4
LDA #BANFM ;"BETTER ALPHA - NOT FIRST MOVE"
JSR BLECCH
SKIP4
JMP CONT1
.ENDIF
F3BD BPL CONT1 ;IF NOT DEBUG THEN BRANCH IF NOT FIRST MOVE
F3BF FHBLEC
F3BF LDA #0 ;FIRST MOVE => CLEAR PRUNE FLAG & COUNTER
F3C1 STA PRNCNT
F4C3 LDA #$FF
F4C5 LDX MSTJMP
F4C7 BEQ FH21
F4C9 LDA DEPTH ;JUMP
F4CB FH21
F4CB STA JMPI

F4CD JSR JMPSV2 ;SAVE MOVE IN JMPLST

.IF PRNT
LDA PRFLG
AND #$08
BEQ SKIP5
LDA #BAFM ;"BETTER ALPHA - FIST MOVE"
JSR BLECCH
SKIP5
.ENDIF
^L
;
;;TRY NEXT INDEX
;
F4D0 CONT1
F4D0 LDY INDEX
;
;;TRY NEXT INDEX -- Y=INDEX
F4D2 CONT2
F4D2 LDX FROMB
F4D4 DEY
F4D5 BMI CONT3 ;DONE WITH THIS SQUARE
F4D7 CPY #1
F4D9 BNE ALJ
F4DB LDA BOARD,X
F4DD CMP #HUMCHK ;STOP IF HUMAN CHECKER
F4DF BEQ CONT3
F4E1 ALJ
F4E1 JMP ALPH10 ;CONTINUE

;
;;TRY NEXT SQUARE -- X=SQUARE
;
F4E4 CONT3
F4E4 DEC TIMOUT ;TIME UP?
F4E6 BNE AB30 ;NO.
F4E8 LDA SWCHB
F4EB AND #8 ;COLOR TV?
F4ED BNE AB10 ;YES.
F4EF LDA DEPTH ;NO. B/W -- USE DEPTH TO SET LUMINANCE
F4F1 ASL A
F4F2 AND #6
F4F4 BPL AB20 ;JMP
F4F6 AB10
F4F6 LDA DEPTH ;COLOR TV
F4F8 ROR A
F4F9 ROR A
F4FA ROR A
F4FB ROR A
F4FC ORA #2 ;SET LUMINANCE
F4FE AB20
F4FE STA COLUBK
F500 AB30

F500 LDA MLTJP
F502 BNE ABDONE ;MULTIPLE JUMP => DONE (ONLY TRY ONE SQUARE)

F504 DEX
F505 BMI ABDONE ;SKIP
F507 JMP ALOOP1 ;CONTINUE
;
;;DONE WITH ALL SQUARES -- RETURN
F50A ABD2
.IF PRNT ;WE COME HERE FOR PRUNING
LDA PRFLG
AND #$04
BEQ SKIP6
LDA #PRUNE ;"PRUNE"
JSR BLECCH
SKIP6
.ENDIF

F50A ASL PRNCNT ;SET PRUNE FLAG (FOR MULTIPLE JUMPS)
F50C SEC
F50D ROR PRNCNT
F50F LDA FRSMOV ;NOT BETTERMOVE
F511 AND #$80
F513 STA FRSMOV
F515 ABDONE
F515 LDA DEPTH
F517 CMP #1
F519 BEQ ABRET1 ;RETURN FOR DEPTH = 1
F51B JMP ABRET2 ;RETURN FOR DEPTH > 1
^L

F51E ABRET1
F51E LDA JMPLST
F520 AND #$3F ;START SQUARE
F522 STA FROMB
F524 STA CURSC
F526 LDX JMPI
F528 BMI NOJUMP ;NO JUMPS

;
;;JUMPS
;
F52A DEC JMPI ;CHANGE 1-9 TO 0-8 (JMPLST INDEX)
F52C STA T0
F52E LDA #0 ;JUMPS
F530 STA T1 ;START WITH JMPLST+0
F532 ASL JMPLST
F534 ROL A
F535 ASL JMPLST ;B7-6 = INDEX INTO MOVTAB
F537 ROL A
F538 TAY
F539 JSR JUMP1 ;SET UP JMPLST FOR FIRST JUMP
F53C BCS JTHRU ;DONE
F52E LDA JMPLST+2 ;MOVE 3RD BYTE TO END OF JMPLST TO SAVE IT
F540 PHA
F541 LDA JMPLST+1 ;2ND BYTE CONTAINS 4 MOVTAB INDEXES
F543 JSR JUMP4 ;DO 4 JUMPS
F546 PLA
F547 BCS JTHRU ;BRANCH IF THROUGH
F549 JSR JUMP4

F54C JTHRU 
F54C LDX FROMB
F54E LDA BOARD,X
F550 PHA
F551 LDA #0 ;CLEAR FROM SQUARE
F553 STA BOARD,X
F555 LDA T0 ;TO SQUARE
F557 JMP THRU2

;
;;NO JUMP -- JUST MAKE 1 MOVE   A=START SQUARE FROM JMPLST
;
F55A NOJUMP
F55A TAX
F55B LDA BOARD,X
F55D PHA
F55E LDA #0
F560 STA BOARD,X
F562 ASL JMPLST
F564 ROL A
F565 ASL JMPLST
F567 ROL A
F568 TAY ;OFFSET INDEX
F569 TXA
F56A CLC
F56B ADC MOVTAB,Y ;TO SQUARE
F56E JTHRU2
F56E TAX
F56F STA TOSQRB
F571 STA MOVE
F573 PLA ;PIECE BEING MOVED
F574 JSR KNGCK2 ;IF NEW KING THEN CHANGE AND INCREMENT PIECE COUNT
F577 STA BOARD,X
F579 STA MOVVAL
^L
;
;;RESTORE VARIABLES -- END OF COMPUTER MOVE
;
F57B JSR RSV

F57E LDX CURSOR ;SET UP PIECE IN CASE CURSOR'S PIECE WAS JUMPED
F580 LDA BOARD,X
F582 STA PIECE

F584 JSR JMPWIN ;CHECK FOR WIN
F587 JMP ATTR10


F58A RSV
F58A LDA SWCHB
F58D RSV2
F58D STA OLDPBQ
F58F AND #$40
F59A STA OLDPB6

F593 JSR TONORM ;MAKE SURE IN NORMAL MODE, Y<-$FF
F596 INY ;0
F597 STY MLTJMP ;NOT MULTIPLE JUMP CONTINUATION
F599 STY ACTIVE ;HUMAN IS ACTIVE
F59B STY FROMTO ;"FROM"
F59D STY ILEGAL ;NOT ILLEGAL MOVE
F59F STY WINSAV ;NO WIN
F5A1 STY FREEZE ;NO FREEZE
F5A3 INY ;1
F5A4 STY MOVFLG ;DISPLAY COMPUTER'S MOVE

.IF PRNT
JSR PRMOVE ;PRINT MOVE ON TI
.ENDIF
F5A6 RTS
^L

F5A7 NOCHCK
;;;;CHECK JOYSTICK BUTTON -- SET UP MODE?
.IF PRNT
LDA INPT5 ;IS RIGHT JOYSTICK BUTTON PUSHED?
BMI JOY2 ;NO.
JSR PASK ;YES.  INPUT PRFLG FROM TI
JOY2
.ENDIF

F5A7 LDA OLDPB6
F5A9 BEQ JOY11
F5AB LDA INPT4 ;SETUP MOVE: CHECK PUSHBUTTON
F5AD BPL JOY3

;
;;BUTTON NOT PRESSED
;
F5AF CLC ;ALWAYS USE P0'S JOYSTICK IN SETUP
F5B0 JMP BNEO ;UNCOND JMP
F5B3 JOY3
F5B3 LDA FRAME ;BUTTON IS PUSHED
F5B5 AND #$1F ;MOVE ONLY ON CERTAIN FRAMES
F5B7 BNE JOY111 ;GOTO CRSBLK
F5B9 LDA PIECE ;ALTERNATE BETWEEN COMPUTER & HUMAN CHECKER, COMPUTER & HUMAN KING, & SPACE
F5BB LDX #4
F5BD JOYLP
F5BD CMP NXTAB,X ;FIND CURRENT SQUARE CONTENTS IN TABLE
F5C0 BEQ JOY9 ;FOUND
F5C2 DEX ;NOT FOUND
F5C3 BPL JOYLP ;CONTINUE

.IF PRNT
LDA #$FF
STA PRFLG
LDA #JLERR
JSR OUTMSG ;PRINT ERROR MESSAGE ON TI
JMP * ;ERROR (SHOULD NEVER OCCUR)
.ENDIF

F5C5 JOY9
F5C5 LDA HPIECE ;MODIFY PIECE COUNT TO REFLECT CHANGE
F5C7 CLC
F5C8 ADC HTAB,X
F5CB STA HPIECE
F5CD LDA CPIECE
F5CF CLC
F5D0 ADC CTAB,X
F5D3 STA SPIECE

F5D5 LDA HKING ;MODIFY KING COUNT TO REFLECT CHANGE
F5D7 CLC
F5D8 ADC HKTAB,X
F5DB STA HKING
F5DD LDA HKING
F5DF CLC
F5E0 ADC CKTAB,X
F5E3 STA CKING

F5E5 DEX ;TAKE PREVIOUS ENTRY FROM TABLE
F5E6 BPL JOY10
F5E8 LDX #4 ;0 GOES TO 4
F5EA JOY10
F5EA LDA NXTAB,X ;LOAD NEXT SQUARE VALUE
F5ED LDX CURSOR
F5EF JSR KNGCK2 ;MUST HAVE KING IF LAST ROW
F5F2 STA PIECE
F5F4 STA BOARD,X
F5F6 JSR TONORM
F5F9 JMP JOY81
^L
;;;;CHECK JOYSTICK BUTTON -- NOT SET UP MODE
F5FC JOY11
F5FC LDA ACTIVE
F5FE ASL A
F5FF ROL A
F600 TAY ;Y=0 IF ACTIVE=0, 1 IF ACTIVE =$80

F601 LDA INPT4,Y ;IF BUTTON PRESSED THEN DROP PIECE IF LEGAL
F604 TAY
F605 EOR OLDINP
F607 BMI NOCHDO
F609 TYA ;NO CHANGE IN PUSHBUTTON
F60A BMI JPM05 ;NOT PRESSED
F60C LDA ILEGAL ;BUTTON PRESSED
F60E BNE JOY20 ;ILLEGAL NOISE SOUND
F610 JOY111 JMP CRSBLK ;OK-- WAIT FOR LETUP
F613 JPM05
F613 LDA ILEGAL ;JOYSTICK MOVEMENT ERROR?
F615 BPL JPM06 ;NO.
F617 LDA ACTIVE ;SET UP CARRY TO INDICATE PLAYER
F619 ROL A
F61A JMP MOVE12 ;YES. CHECK JOYSTICK MOTION
F61D JPM06
F61D LDA #0 ;OK
F61F STA ILEGAL
F621 JMP10
F621 JMP MOVE10 ;CHECK JOYSTICK
F624 NOCHDO
F624 STY OLDINP ;STORE NEW BUTTON READING
F626 TYA
F627 BMI JPM10 ;NOT PRESSED

;;;;BUTTON JUST PRESSED
F629 LDA FROMTO
F62B BNE TO10 ;TO

;;;;FROM
F62D JSR TOSET ;DON'T DISPLAY COMPUTER'S MOVE, SET UP TOSQRB
F630 LDX CURSOR
F632 JSR MOVCHK
F635 BCC FROM10 ;CAN JUMP
F637 BEQ JOY12 ;CAN'T MOVE

F639 LDA MSTJMP ;MUST JUMP?
F63B BNE JOY12 ;YES, NOT LEGAL PIECE TO PICK UP
F63D FROM10
F63D INC FROMTO ;CAN MOVE - DO TO NEXT

F63F LDX CURSOR
F641 STX MOVE
F643 LDA BOARD,X
F645 STA PIECE
F647 STA MOVVAL
F649 LDA #0
F64B STA MLTJMP ;NO MULTIPLE JUMPS YET
F64D JSR TONORM
F650 LDA #PICKUP
F652 JSR SOUND1
F655 JMP ATTR10

;
;;ILLEGAL MOVE -- MAKE NOISE
;
F658 JOY12
F658 LDA #1
F65A JOY13
F65A STA ILEGAL ;ILLEGAL MOVE NOISE WILL CONTINUE UNTIL BUTTON IS RELEASED
F65C JSR TONORM
F65F LDA MSTJMP
F661 BEQ JOY20
F663 LDA #JP
F665 STA TOSQRB
F667 JOY20
F667 LDA #$30 ;AUDF0
F669 LDX #$08 ;AUDV0
F66B LDY #ERRSND ;AUDC0
F66D JSR SOUND3
F670 JMP CRSBLK
;
;;"TO" MODE
;
F673 TO10
F673 LDX CURSOR ;FROM SQUARE
F675 LDA #0
F677 STA BOARD,X
F679 CPX MOVE ;FROM SQUARE = TO SQUARE?
F67B BNE TO11 ;NO.
F67D LDY MLTJMP ;YES. MULTIPLE JUMP?
F67F BNE JOY12 ;YES.  MUST MOVE THIS PIECE TO CONTINUE MULTIPLE JUMP
F681 JSR TOMOV ;SET UP TOSQRB, CLEAR MOVFLG. RETURN TO "FROM" SQUARE -- CLEAR MOVE
F684 LDA PIECE
F686 STA BOARD,X
F688 JMP JOY81 ;WAIT FOR SAME PLAYER TO MOVE AGAIN
F68B TO11
F68B LDY MSTJMP ;MUST JUMP?
F68D BEQ TO50 ;NO. SKIP
;
;;JUMP
;
;
;;CHANGE OPPONENT'S PIECE COUNT -- REMOVE JUMPED PIECE
;
F68F TXA ;CURSOR
F690 LDY INDEX
F692 CLC
F693 ADC MOVTAB,Y
F696 TAX
F697 LDA BOARD,X ;LOAD JUMPED PIECE

F699 LDY #0
F69B STY BOARD,X ;REMOVE JUMPED PIECE FROM BOARD
F69D ASL A ;SHIFT KING BIT TO MSB
F69E ASL A
F69F JSR CHGCNT ;CHANGE OPPONENT'S PIECE COUNT
F6A2 JSR TOSUB ;DO STUFF WITH PIECE INCLUDING KING CHECK
;;;;STORE IN NEW SQUARE, RETURN X=MOVE. NEW KING?
F6A5 BCS T051 ;YES.  NEW KING CAN'T DO MULTIPLE JUMP
F6A7 JSR MOVCHK ;RETURN X UNCHANGED.  CAN PIECE JUMP AGAIN?
F6AA BCS TO51 ;NO.
;;;;YES.
.IF PRNG
JSR PRMOV2 ;PRINT MOVE IF DEBUG
.ENDIF

F6AC STX CURSOR ;MOVE TO CURSOR

F6AE LDA #JP
F6B0 STA TOSQRB
F6B2 STA FROMTO ;TO MODE
F6B4 STA MLTJMP ;<>0 => CONTINUE JUMPING
F6B6 BNE JOY90 ;JMP

F6B8 TO50
F6B8 JSR TOSUB ;DO STUFF WITH MOVE & PIECE INCLUDING KING CHECK & STORE
F6BB TO51
.IF PRNT
JSR PRMOV2
.ENDIF

F6BB STX CURSOR
F6BD JSR TONORM ;RETURNS Y=$FF
F6C0 INY ;0
F6C1 STY MSTJMP ;CLEAR MSTJMP


F6C3 JSR SWIT ;REVERSE ACTIVE PLAYER
F6C6 LDA #FRZTIM ;SET FREEZE TIMER
F6C8 STA FREEZE

;
;;BRANCH HERE FROM SETUP MODE WHEN PUSHBUTTON PUSHED
;;BRANCH HERE FROM CASE WHER EPIECE IS RETURNED TO STARTING SQUARE
;
F6CA JOY81
F6CA LDA #0
F6CC STA FROMTO ;DO FROM NEXT
F6CE JOY90
F6CE JSR SOUND0 ;PIECE DROPPING SOUND
F6D1 JMP ATTR10
^L
;;;;CHECK FOR JOYSTICK MOVEMENT EVERY FEW FRAMES
F6D4 MOVE10
F6D4 LDA ACTIVE ;MOVE BIT 7 OF ACTIVE TO BIT 1 OF Y
F6D6 ROL A ;SET CARRY IF PLAYER 1
;
;;BRANCH HERE FROM SETUP WITH Y=0   CC => PLAYER 0
;
F6D7 BNE0
F6D7 LDA FRAME
F6D9 AND #$1F
F6DB BNE MOVE36 ;DON'T MOVE THIS FRAME
F6DD MOVE12
F6DD LDA SWCHA
F6E0 BCS MOVE20 ;CHECK CARRY BIT (SET UP PREVIOUSLY)
F6E2 LSR A ;P0
F6E3 LSR A
F6E4 LSR A
F6E5 LSR A
F6E6 MOVE20
F6E6 AND #$F
F6E8 CMP #$F ;IS JOYSTICK CENTERED?
F6EA BEQ MOVE36 ;YES. SKIP
;
;;;;;JOYSTICK IS NOT CENTERED
F6EC MOVE28
F6EC JSR TONORM

F6EF LDX MOVE ;TO MODE
F6F1 LDY FROMTO ;FROM?
F6F3 BNE MOVE29 ;NO. TO

F6F5 JSR TOMOV ;SET UP TOSQRB, CLEAR MOVFLG. RETURN TO "FROM" SQUARE -- CLEAR MOVE
F6F8 LDX CURSOR
F6FA MOVE29

F5FA LDY #3 ;CHECK FOR DIAGONAL MOVEMENT
F5FC M28LP
F5FC CMP JOYTAB,Y
F5FF BEQ MOVE37 ;DIAGONAL FOUND
F701 DEY
F702 BPL M28LP ;CONTINUE
F704 MOVE36
F704 JMP FRM30 ;NOT DIAGONAL -- NO SOUND

;;;;;DIAGONAL MOVEMENT
F707 MOVE37
F707 JSR ONBRD2 ;COMPUTE MOVE SQUARE. OFF BOARD?
F70A BCC MOVE50 ;NO. OK
F70C MOVE40
F70C LDA #$80 ;INDICATE JOYSTICK ILLEGAL MOVE
F70E JMP JOY13 ;ERROR
F711 MOVE50
F711 TAX
F712 LDA FROMTO ;FROM?
F714 BNE FRM10 ;NO. TO
F716 LDA BOARD,X ;YES. FROM
F718 STA PIECE
F17A STX CURSOR
F17C JMP FRM20 ;JMP
F71F FRM10
F71F LDA MSTJMP ;MUST JUMP?
F721 BEQ MOVE60 ;NO.
F723 LDA BOARD,X ;YES. SQUARE EMPTY?
F725 BEQ MOVE40 ;YES. ERROR
F727 EOR ACTIVE ;NO. OPPONENT'S PIECE?
F729 BPL MOVE40 ;NO. ERROR
F72B JSR ONBRD2 ;YES. MOVE TO NEXT SQUARE.  OFF BOARD?
F72E BCS MOVE40 ;YES. ERROR
F730 TAX
F731 MOVE60
F731 CPX CURSOR ;RETURN TO FROM SQUARE?
F733 BEQ FRM15 ;YES. OK
F735 LDA MOVE ;ALREADY MOVED?
F737 CMP CURSOR
F739 BNE MOVE40 ;YES. CAN'T MOVE PIECE AGAIN (EXCEPT TO FROM SQUARE)
F73B LDA BOARD,X ;EMPTY?
F73D BNE MOVE40 ;NO. ERROR
F73F LDA PIECE ;YES. LEGAL MOVE DIRECTION?
F741 CMP #HUMCHK ;HUMAN CHECKER (NOT KING)?
F743 BNE MOVE70 ;NO.
F745 CPY #2 ;YES. LEGAL?
F747 BCC MOVE40 ;NO. ERROR
F749 MOVE70
F749 CMP #CMPCHK ;RIGHT PLAYER CHECKER (NOT KING)?
F74B BNE FRM15 ;NO. SKIP
F74D CPY #2 ;YES. LEGAL?
F74F BCS MOVE40 ;NO. ERROR
F751 FRM15
F751 LDA BOARD,X
F753 STA MOVVAL
F755 STX MOVE
F757 STX TOSQRB
F759 STY INDEX

F75B FRM20
F75B LDA #$30 ;SET UP FOR MOVE SOUND  -- LOAD AUDF0
F75D LDY #14 ;AUDC0
F75F JSR SOUND2 ;USE MAX VOLUME -- CALL SOUND ROUTINE
F762 FRM30
F762 LDA #0
F764 STA ILEGAL ;CLEAR ILLEGAL MOVE FLAG
^L
;;SET UP CURSOR, MOVE, JMP DISPLAY
F766 CRSBLK
F766 LDA FRAME
F768 AND #$10
F76A BNE CRSB10
776C LDA MOVFLG
F76E BEQ ATTR10

F770 SEC ;DISPLAY COMPUTER MOVE
F771 JSR JMPSET ;DISPLAY ANY JUMPED PIECES
F774 LDX CURSC ;COMPUTER CURSOR
F776 LDA #CMPCRS
F778 STA BOARD,X
F77A LDX MOVE ;DON'T SHOW COMPUTER'S NEW LOC
F77C LDA #0
F77E STA BOARD,X

F780 LDX CURSOR
F782 CPX MOVE ;HUMAN CURSOR & COMPUTER MOVE IN SAME SQUARE?
F784 BNE ATTR10 ;NO
F786 LDA #HUMCRS ;YES. DISPLAY HUMAN CURSOR NOW
F788 LDY ACTIVE
F78A BPL CRSB03
F78C LDA #CMPCRS
F78E CRSB03
F78E STA BOARD,X
F790 JMP ATTR10 ;JMP

F793 CRSB10
F793 LDA WINSAV
F795 BEQ CRSB13

F797 LDA MOVFLG
F799 BEQ CRSB17
F79B LDX CURSC ;COMPUTER HAS WON -- DISPLAY ITS CURSOR
F79D LDA #CMPCRS
F79F STA BOARD,X
F7A1 BNE CRSB17 ;JMP

F7A3 CRSB13
F7A3 LDX CURSOR ;HUMAN CURSOR
F7A5 LDA #0
F7A7 LDY FREEZE ;FREEZE LAST MOVE?
F7A9 BNE CRSB16 ;YES.  DON'T DISPLAY CURSOR OR PIECE -- PIECE WILL BLINK
F7AB LDA MOVFLG ;COMPUTER MOVE BEING DISPLAYED?
F7AD BEQ CRSB14 ;NO. OK
F7AF CPX MOVE ;HUMAN CURSOR & COMPUTER MOVE ON SAME SQUARE?
F7B1 BEQ CRSB17 ;YES.  DON'T DISPLAY HUMAN CURSOR NOW
F7B3 CRSB14
F7B3 LDA #HUMCRS
F7B5 LDY ACTIVE
F7B7 BPL CRSB15
F7B9 LDA #CMPCRS ;RIGHT PLAYER (P1) IS ACTIVE
F7BB CRSB15
F7BB STA BOARD,X

F7BD CRSB17
F7BD LDA FROMTO
F7BF BEQ ATTR10 ;FROM (MAY BE DISPLAYING COMPUTER MOVE)
F7C1 LDX MOVE ;TO
F7C3 LDY PIECE
F7C5 CPY MOVVAL ;DOES PIECE = MOVVVAL?
F7C7 BNE CRSB20 ;NO. SKIP
F7C9 LDA FRAME ;YES.  ONLY DISPLAY PIECE ON XXX10100 - XXX11011
F7CB ROR A ;WHEN B2 & B3 ARE DIFFERENT
F7CC EOR FRAME
F7CE AND #4
F7D0 BNE CRSB20
F7D2 LDY #0
F7D4 CRSB20
F7D4 STY BOARD,X
^L
;;LOAD RAM TABLE OF GRAPHICS FOR SCORE KERNEL
F7D6 ATTR10
F7D6 LDY #1 ;ONE PLAYER
F7D8 LDX GAMNO
F7DA STX SCP0
F7DC CPX #PLAY2
F7DE BNE ATTR20
F7E0 INY ;2-PLAYER GAME
F7E1 ATTR20
F7E1 STY SCP1

F7E3 LDA FREEZE ;FREEZE?
F7E5 BNE ATTR35 ;YES. SKIP -- DON'T CHANGE FROM
F7E7 LDX CURSOR
F7E9 LDA MOVFLG ;COMPUTER MOVE DISPLAY?
F7EB BEQ ATTR30 ;NO.
F7ED LDX FROMB ;YES. USE FROMB
F7EF ATTR30
F7EF JSR IEDSP
F7F2 STA FROM ;CONVERT BINARY TO BCD
F7F4 ATTR35
F7F4 LDX TOSQRB
F7F6 JSR IEDSP
F7F9 STA TOSQR


;
;;BASED ON VCS BASKETBALL BY AL MILLER (WITH EOR IMPROVEMENT A LA COIN-OP)
;
F7FB LDX #0
F7FD STX T4+1 ;INITIALIZE HIGH BYTE INDIRECT POINTER
F7FF LDA #SCRTBL/256
F801 STA T0+1
F803 STA T2+1
F805 LDA #5*4+SCRLP0
;
F807 LDX #3
F809 LODRAM
F809 SEC
F80A SBC #5
F80C STA T4
F80E LDA FROM,X ;GET LOW ORDER DIGIT
F810 AND #$0F
F812 STA T2
F814 ASL A
F815 ASL A ;SHIFT LEFT AND CLEAR CARRY
F816 ADC T2 ;FIVE TIMES LOW DIGIT
F818 ADC #SCRTBL&$FF ;ADD IN BEGINNING OF GRAPHICS TABLE [todo - indent properly]
F81A STA T0 ;STORE IN LOW BYTE OF INDIRECT POINTER
;
;
F81C LDA FROM,X ;GET HIGH ORDER DIGIT
F81E AND #$F0
F820 LSR A
F821 LSR A ;SHIFT RIGHT AND CLEAR CARRY
F822 STA T2
F824 LSR A
F825 LSR A
F826 ADC T2 ;FIVE TIMES HIGH ORDER BIT
F828 ADC #SCRTBL&$FF ;ADD IN BEGINNING OF GRAPHICS TABLE
F82A STA T2 ;STORE IN LOW BYTE OF INDIRECT POINTER
;
F82C LDY #4
F82E HIDIGT
F82E LDA (T0),Y
F830 EOR (T2),Y ;TAKE UPPER NIBBLE FROM T2, LOWER FROM T0
F832 AND #$0F
F834 EOR (T2),Y
F836 STA (T4),Y ;STORE IN RAM TABLE OF GRAPHICS
F838 DEY
F839 BPL HIDIGT

F83B LDA T4
;
F83D DEX
F83E BPL LODRAM
;
F840 LDX #5
F842 DOROT LDA SCRRPF-1,X ;MAKE MIRROR IMAGE [todo - original had no semicolon]
;
F844 LDY #7
F846 ROTIT ROL A
F847 ROR SCRRPF-1,X
F849 DEY
F84A BPL ROTIT
;
F84C DEX
F84D BNE DOROT
^L
;
;;SET UP PLAYERS AND MISSILE FOR SCORE
;
F84F LDA #$15
F851 STA NUSIZ0 ;2 CLOCK MISSILE, DOUBLE SIZE PLAYERS (1 COPY)
F853 STA NUSIZ1
F855 LDA #$F0 ;1 TO RIGHT
F857 STA HMP0
F859 LDA #$30 ;3 TO LEFT
F85B STA HMP1
F85D LDA #$C0 ;4 TO RIGHT
F85F STA HMM0

F861 STA WSYNC
F863 LDY #8 ;8*5+1 = 41 MACHINE CYCLES
F865 WSLP DEY ;WARNING -- MUST NOT CROSS PAGE BOUNDARY [todo - check in converted code]
F866 BNE WSLP ;DELAY
F868 STA RESP0 ;44
F86A NOP ;46 DELAY
F86B STA RESM0 ;49
F86D STA RESP1 ;52

F86F STA WSYNC
F871 STA HMOVE
^L
;
;;SET UP COLORS, DOING ATTRACT IF NECESSARY
;
F873 LDX #0 ;0 IF NOT ATTRACT
F875 LDA OLDPBQ
F877 AND #$08 ;B/W?
F879 BNE QQ30 ;NO. COLOR -- SKIP
F87B LDA #$0F ;YES.
F87D LDY GFLG2 ;ATTRACT?
F87F BNE QQ10 ;NO. SKIP
F881 LDX ATIM ;YES. USE ATTRACT TIMER TO CHANGE LUMS
F883 LDA #$07 ;MASK OFF COLOR BITS
F885 QQ10
F885 STA T0 ;SAVE MASK
F887 TXA
F888 EOR #$06 ;DARK SQUARE COLOR
F88A AND T0
F88C STA COLSQ
F88E STA COLUPF
F890 STA COLUBK ;USE THIS FOR BK COLOR FOR SCORE
F892 TXA
F893 EOR #$0A ;LIGHT SQUARE COLOR
F895 AND T0
F897 STA T8
F899 TXA
F89A EOR #$0C ;LIGHT CHECKER COLOR
F89C AND T0
F89E STA COLP1 ;ASSUME COMPUTER (P1) IS LIGHT
F8A0 TXA
;;EOR #$00 ;ASSUME HUMAN (P0) IS DARK [todo - circled in printout. weird no-op?]
F8A1 AND T0
F8A3 STA COLP0
F8A5 LDY COLHUM
F8A7 CPY #DARK ;IS HUMAN DARK?
F8A9 BEQ QQ20 ;YES. SKIP
F8AB LDY COLP1 ;NO. SWITCH
F8AD STY COLP0
F8AF STA COLP1
F8B1 TYA
F8B2 QQ20
F8B2 STA COLUP0 ;STORE HUMAN COLOR FOR SCORE
F8B4 STA COLUP1
F8B6 JMP QQ50
;
;;COLOR
;
F8B9 QQ30
F8B9 LDA #$FF
F8BB LDY GFLG2 ;ATTRACT?
F8BD BNE QQ40 ;NO. SKIP
F8BF LDA ATIM ;YES. ROTATE SO COLORS SHIFT QUICKLY
F8C1 ROL A
F8C2 ROL A
F8C3 ROL A
F8C4 ROL A
F8C5 TAX
F8C6 LDA #$F7 ;MASK OFF HI BIT OF LUM IN ATTRACT
F8C8 QQ40
F8C8 STA T0
F8CA TXA
F8CB EOR #DRKCHR
F8CD LDY COLHUM
F8CF CPY #DARK ;IS HUMAN DARK?
F8D1 BEQ LPSKIP ;YES. SKIP
F8D3 TXA
F8D4 EOR #LTCHR ;HUMAN IS LIGHT -- SO IS SCORE COLOR
F8D6 LPSKIP
F8D6 AND T0
F8D8 STA COLUP0
F8DA STA COLUP1

F8DC LDY #0
F8DE LDA GAMNO
F8E0 AND #$0F
F8E2 CMP #HMIN
F8E4 BCC LPX
F8E6 LDY #3 ;USE DIFFERENT COLORS FOR HARD GAMES
F8E8 LPX
F8E8 TXA
F8E9 EOR COLTB,Y
F8EC AND T0
F8EE STA COLSQ ;DARK SQUARE COLOR
F8F0 STA COLUPF ;SET UP PLAYFIELD COLOR

F8F2 LDA GFLG2 ;ATTRACT?
F8F4 BNE LPQX ;NO.
F8F6 INY ;YES.  USE DIF COLORS
F8F7 LPQX
F8F7 TXA
F8F8 EOR COLTB+1,Y
F8FB AND T0
F8FD STA COLUBK ;LIGHT SQUARE COLOR AND BK
F8FF STA T8

F901 TXA
F902 EOR COLHUM
F904 AND T0
F906 STA COLP0
F908 TXA
F909 EOR COLCMP
F90B AND T0
F90D STA COLP1

F90F QQ50
F90F LDA WINSAV
F911 BEQ LP10
F913 LDA FRAME ;SOMEONE HAS WON
F915 AND #$10
F917 BNE LP10 ;TURN OFF REMAINING PLAYER'S PIECES EVERY
;;;;FEW FRAMES BY SETTING TO PF COLOR
F919 LDA COLSQ
F91B LDX ACTIVE
F91D BMI LP06
F91F STA COLP1 ;HUMAN CAN'T MOVE -- TURN OFF COMPUTER
F921 BPL LP10 ;JMP
F923 LP06
F923 STA COLP0 ;COMPUTER CAN'T MOVE -- TURN OFF HUMAN
F925 LP10
F925 LDY BLNKTM
F927 BEQ VBLP

F929 LDY #2 ;KEEP VBLANK ON WHIL SYNCING AFTER CALCULATIONS

F92B DEC VLNKTM
F92D BNE VBLP

F92F LDA GAMNO ;BLANK TIME IS UP
F931 CMP #PLAY2
F933 BEQ VBLP ;2-PLAYER GAME
F935 JSR SOUND0 ;PIECE DROPPING SOUND IF 1-PLAY & HUMAN NEXT

F938 VBLP LDX INTIM ;WAIT FOR TIMER TO RUN OUT
F93B BNE VBLP

F93D STA WSYNC
F93F STY VBLANK ;END OF VERTICAL BLANK (IF Y=0)
.IF PAL ;IF PAL THEN ADD 3 EXTRA LINES AT TOP OF DISPLAY
JSR WAIT3 ;DO 3 WSYNC'S
.ENDIF

F941 JMP JMPBAK ;SKIP BACK TO KERNEL
;;;;END OF MAIN PROGRAM
^L

;;GSRST -- SUBROUTINE TO CHECK GAME SELECT AND RESET SWITCHES
;
F944 GSRST
F944 LDA OLDPBQ ;CHECK GAME SELECT
F946 ROR A
F947 ROR A
F948 BCS GS1 ;BRANCH IF GAME SELECT NOT PRESSED


F94A DEC GSTIM ;GAME SELECT PRESSED -- DON'T CHANGE GAME NUMBER TILL TIME UP
F94C BNE GRTN2

F94E LDA #GSCON
F950 STA GSTIM ;REINITIALIZE TIMER

F952 SED ;DECIMAL ARITHMETIC
F953 LDA GAMNO
F955 CLC
F956 ADC #1
F958 CMP #$20 ;GMAX+1 IN DECIMAL
F95A BNE RESET2
F95C LDA #1
F95E RESET2
F95E STA GAMNO
F960 CLD

F961 LDA WINSAV ;STAY IN ATTRACT IF WIN
F963 BNE GSKIP

F965 JSR TONORM ;MAKE SURE NOT ATTRACT, RETURN Y=$FF
F968 GSKIP
F968 LDY #0
F96A STY AUDV1
F96C GRTN2
F96C RTS

;;;;SET UP GAME SELECT TIMER & CHECK GAME RESET
F96D GS1
F96D ASL A
F96E BCS RES20 ;NOT PRESSED -- GSTIM<-1 & RETURN

F970 LDA #0 ;RESET BUTTON IS PRESSED
F972 LDX #ZROEND-1-ZROBGN
F974 CLRLP
F974 STA ZROBGN,X
F976 DEX
F977 BPL CLRLP

.IF PRNT
LDX #0
STX PRCNT
.ENDIF

F979 STA AUDV1 ;OFF (0)

F97B LDX #3 ;CLEAR MORE STUFF -- MOVVAL, MOVFLG, WINSAV, FROMTO
F97D RESLP
F97D STA MOVVAL,X
F97F DEX
F980 BPL RESLP

;
;;RESET -- ENTRY POINT FROM INIT CODE
;
F982 RESET
F982 JSR TONORM ;NOT ATTRACT, Y<-$FF
F985 STY JMPI ;$FF

F987 JSR MOVCLF ;NO CURRENT MOVE SO POINT OFF BOARD
F98A LDA OLDPB6
F98C BNE RES10 ;IF SETUP MODE THEN LEAVE BOARD EMPTY
;;;;SET UP BOARD
F98E LDA #CHECKER+CLP0 ;HUMAN ON 0-12 (8 NOT USED)
F990 LDY #CHECKER+CLP1 ;COMPUTER ON SQUARES 22-34 (26 NOT USED)
F992 LDX #13-1+1
F994 BRDLP
F994 STA BOARD-1,X
F996 STY BOARD-1+22,X
F998 DEX
F999 BNE BRDLP

F99B STX BOARD+8 ;CLEAR PHANTOM SQUARES
F99D STX BOARD+26

F99F LDA #12*2 ;INITIALIZE PIECE COUNTS -- 12 MEN PER SIDE
F9A1 STA CPIECE ;COMPUTER PIECE COUNT (P1)
F9A3 STA HPIECE ;HUMAN PIECE COUNT (P0)

F9A5 RES10
F9A5 LDX #11 ;INITIALIZE CURSOR POSITIONS
F9A7 LDY #23
F9A9 LDA GAMNO
F9AB CMP #PLAY2
F9AD BNE RES15
F9AF LDA ACTIVE ;BOTTOM (P0) PLAYER STARTS?
F9B1 BPL RES15 ;YES.
F9B3 LDX #23 ;NO. TOP PLAYER STARTS
F9B5 LDY #11
F9B7 RES15
F9B7 STX CURSOR
F9B9 STY CURSC
F9BB LDA BOARD,X
F9BD STA PIECE

F9BF LDA #$80
F9C1 STA OLDINP
F9C3 JSR CRSTUP ;SET UP ACTIVE, COLHUM, COLCMP BASED ON RIGHT DIFFICULTY SWITCH

F9C6 JSR TOSET ;MSTJMP=0 SO CLEAR TOSQRB, MOVFLG
F9C9 RES20
F9C9 LDX #1
F9CB STX GSTIM
F9CD RTS
^L
.IF PAL
;
;;WAIT3 -- DO 3 WSYNC'S
;;WAIT2 -- DO 2 WSYNC'S
;
WAIT3
STA WSYNC
WAIT2
STA WSYNC
STA WSYNC
RTS
.ENDIF
;
;;JMPSET -- SET UP OR CLEAR BOARD FOR JUMP DISPLAY
;
;;                INPUT:  CC  => CLEAR EACH SQUARE [todo - check indentation against right comments]
;;                        CS => PUT JUMPED CHECKERS IN EACH SQUARE IN JMPLST
;
F9CE JMPSET
F9CE LDY JMPI
F9D0 BMI JMPSR ;NO JUMPS
F9D2 JMPSLP
F9D2 LDA #HUMCHK
F9D4 LDX JMPLST,Y
F9D6 BPL JMPS10
F9D8 TXA ;<0 => KING
F9D9 AND #$7F
F9DB TAX
F9DC LDA #HUMKNG
F9DE JMPS10
F9DE BCS JMPS20
F9E0 LDA #0 ;CLEAR SQUARE
F9E2 JMPS20
F9E2 STA BOARD,X
F9E4 DEY
F9E5 BPL JMPSLP
F9E7 JMPSR
F9E7 RTS


;
;;JMPWIN -- SET UP OLDINP, MLTJMP, CALL JMPCHK TO SET UP MSTJMP,XMOVE
;;                        RETURN EQ=>WIN, NE=> NO WIN
;
F9E8 JMPWIN
F9E8 LDA #$80
F9EA STA OLDINP ;ASSUME BUTTON NOT PRESSED
F9EC LDA #0
F9EE STA MLTJMP
F9F0 JSR JMPCHK ;CHECK FOR JUMPS & ANY MOVES
F9F3 BNE JMPRTN ;CAN MOVE

.IF PRNT ;CAN'T MOVE -- OTHER PLAYER WINS
LDA PRFLG
BEQ PRSKIP
JSR
CRLF
LDA #GAMOVR ;DISPLAY "GAME OVER" ON TI IF DEBUG
JSR OUTMSG
JSR PRBRD
PRSKIP
.ENDIF

F9F5 INC WINSAV
F9F7 LDA #$80
F9F9 STA SNDTIM
F9FB LDA #0 ;EQ
F9FD JMPRTN
F9FD RTS
;
;;JMPCHK -- CHECK TO SEE IF ACTIVE PLAYER HAS ANY JUMPS.SETUP MSTJMP,CALL MOVCHK TO SET UP XMOVE
;;;;RETURN CC=> JUMP, CS => NO JUMPS
;;;;MSTJMP=4 OR MSTJMP =0
;;;;NE => ACTIVE PLAYER CAN MOVE (ANYMVE = 1)
;;;;EQ => ACTIVE PLAYER CANNOT MOVE AT ALL (ANYMVE = 0)
;
;;;;SETS UP BLNKTM, TURNS O VBLANK
;
F9FE JMPCHK
F9FE LDA #VBTIM ;BLANK SCREEN FOR 1/2 SECOND AFTER
FA00 STA BLNKTM ;THIS BECAUSE IT TAKES 1203-2080 MICROSEC.
FA02 LDA #2
FA04 STA VBLANK ;TURN ON VBLANK
;
;;JMPCK2 -- SAME AS JMPCHK EXCEPT NO VBLANK JUNK
;
FA06 JMPCK2
FA06 LDA #0
FA08 STA ANYMVE ;NO MOVE FOUND YET
FA0A LDA #4
FA0C STA MSTJMP ;ASSUME JUMP
FA0E LDX #34
FA10 JMPLP1
FA10 JSR MOVCHK
FA13 BEQ JPF1
FA15 INC ANYMVE ;INDICATE THAT MOVE HAS BEEN FOUND
FA17 BCC JMPF2 ;JUMP FOUND
FA19 JPF1
FA19 DEX
FA1A BPL JMPLP1
FA1C INX ;NO JUMP FOUND  0, CS
FA1D STX MSTJMP
FA1F JMPF2
FA1F LDY ANYMVE
FA21 RTS
^L
;
;;LOADY -- Y <-- 3 (OR 1 IF CMPCHK)
;
FA22 LOADY
FA22 LDY #3
FA24 LDA BOARD,X
FA26 CMP #CMPCHK
FA28 BNE LODY10
FA2A LDY #1 ;COMPUTER CHECKER CANNOT MOVE FORWARD (UP) -- SKIP RF,LF
FA2C LODY10
FA2C RTS
;
;;MOVCHK -- CHECK TO SEE IF THIS IS AN ACTIVE PIECE WHICH CAN JUMP
;
;;                INPUT: X = SQUARE NUMBER (0-34)
;;                OUTPUT: X=SQUARE #
;;                CC => ACTIVE, CAN JUMP
;;                CS => CANNOT JUMP
;;                Y>0 (NE)  => ACTIVE PIECE WHICH CAN MOVE -- SAVED IN YSAVE
;;                Y=0 (EQ)  => NO MOVE AT ALL FOR THIS SQUARE
;;                XMOVE=START SQUARE OF FIRST MOVE OR JUMP FOUND IF ANYMVE=0 OR IF JUMP.
;
FA2D MOVCHK
FA2D LDY #0
FA2F STY YSAVE ;T2
FA31 LDA BOARD,X
FA33 BEQ JMP12 ;EMPTY SQUARE
FA35 EOR ACTIVE
FA37 BMI JMP12 ;PASSIVE PIECE -- CAN'T MOVE
FA39 STX XSAVE ;T1
FA3B JSR LOADY ;Y <-- 3 (OR 1 IF CMPCHK)
FA3E JMPLP2
FA3E JSR ONBRD2 ;ADD MOVTAB OFFSET TO SQUARE AND CHECK TO SEE IF OFF BOARD
FA41 BCS JMP10 ;OFF BOARD
FA43 TAX
FA44 LDA BOARD,X
FA46 BNE JMP05
;
;;NOT JUMP
;
FA48 TXA ;NEXT SQUARE IS EMPTY
FA49 LDA ANYMVE
FA4B BNE JMP02
FA4D LDX XSAVE
FA4F STX XMOVE ;SAVE START SQUARE AND OFFSET INDEX
FA51 JMP02
FA51 INC YSAVE
FA53 BNE JMP10 ;JMP
;
;;JUMP
;
FA55 JMP05
FA55 EOR ACTIVE ;NEXT SQUARE IS OCCUPIED
FA57 BPL JMP10 ;ACTIVE PIECE -- CAN'T JUMP OWN PIECE
FA59 JSR ONBRD2 ;ADD MOVTAB OFFSET TO SQUARE AND CHECK TO SEE IF OFF BOARD
FA5C BCS JMP10 ;CAN'T JUMP OFF BOARD
FA5E TAX
FA5F LDA BOARD,X
FA61 BNE JMP10

FA63 LDX XSAVE ;SAVE START SQUARE AND OFFSET INDEX FOR JUMP
FA65 STX XMOVE ;CC, NE  JUMP FOUND
FA67 LDY #1
FA69 RTS

FA6A JMP10
FA6A LDX XSAVE
FA6C DEY
FA6D BMI JMP12 ;DONE
FA6F CPY #1
FA71 BNE JMPLP2 ;CONTINUE
FA73 LDA BOARD,X
FA75 CMP #HUMCHK
FA77 BNE JMPLP2
;;;;HUMAN CHECKER CAN'T GO BACK (DOWN) SKIP RB,LB
FA79 JMP12
FA79 SEC ;NO JUMP FOUND
FA7A LDY YSAFE ;LOAD MOVE COUNT
FA7C RTS
^L
;
;;XIE1 --      INPUT X = INTERNAL SQUARE NUMBER (0-34) [todo - fix this wrong indentation line]
;;;;OUTPUT X = EXTERNAL SQUARE #-1    (0-31)
;;;;AFFECTS X, CARRY SET IF RESULT = 24-31
;;;;INTERNAL #'S 8, 17 AND 26 ARE NOT USED.
;
FA7D XIE1
FA7D CPX #8
FA7F BCC ARTN ;O-7 OK
FA81 DEX ;9-34 TO 8-33
FA82 CPX #16
FA84 BCC ARTN ;8-15 OK
FA86 DEX ;17-33 TO 16-32
FA87 CPX #24
FA89 BCC ARTN ;16-23 OK
FA8B DEX ;25-32 TO 24-31
FA8C ARTN
FA8C RTS
;
;;IEDSP -- CONVERT INTERNAL SQUARE # IN X (0-34) TO
;;;;EXTERNAL IN A FOR DISPLAY.
;;;;1-32 IF HUMAN IS DARK, 32-1 IF HUMAN IS LIGHT
FA8D IEDSP
FA8D TXA
FA8E BPL IED04

FA90 LDA FRAME
FA92 AND #$10
FA94 BEQ IED02
FA96 LDX #BLANK ;IF SPECIAL CHAR (E.Q. "JP") THEN BLINK ON & OFF
FA98 IED02
FA98 TXA
FA99 RTS

FA9A IED04
FA9A JSR XIE1

FA9D LDA OLDPBQ ;CHECK "B/W SWITCH"
FA9F LDY COLHUM
FAA1 CPY #DARK
FAA3 BNE IED05 ;HUMAN LIGHT => REVERSE NUMBERING
FAA5 AND #$8 ;DARK=>DON'T REVERSE
FAA7 BEQ IED07 ;B/W => REVERSE
FAA9 BNE IED10 ;NOT B/W => DON'T REVERSE
FAAB IED05
FAAB AND #8 ;CHECK B/W
FAAD BEQ IED10 ;B/W IMPLIES DON'T REVERSE
FAAF IED07
FAAF TXA ;BOARD REVERSED
FAB0 SEC
FAB1 SBC #32 ;31-X = -(X-31) = -((X-32)+1) = COMP (X-32)
FAB3 EOR #$FF ;COMPLEMENT
FAB5 TAX
FAB6 EID10
FAB6 INX ;1-32
FAB7 TXA

;;;;CONVERT BINARY IN A TO DECIMAL IN A
FAB8 LDY #0
FABA IEDLP1
FABA CMP #$10
FABC BCC IED20 ;0-9 => DONE
FABE SBC #10
FAC0 INY
FAC1 BNE EIDLP1 ;JMP

FAC3 IEDLP2
FAC3 ADC #16 ;CONVERT BINARY TO DECIMAL
FAC5 IED20
FAC5 DEY
FAC6 BPL IEDLP2
FAC8 RTS
^L
;
;;ONBRD2 -- ADD MOVTAB OFFSET TO SQUARE AND CHECK TO SEE IF OFF BOARD
;
FAC9 ONBRD2
FAC9 TXA
FACA CLC
FACB ADC MOVTAB,Y
;
;;ONBRD -- INPUT: A=INTERNAL SQUARE #
;;;;OUTPUT: CS => OFF BOARD
;;;; A,X,Y ARE NOT CHANGED
;
FACE CMP #35
FAD0 BCS NOTON ;>=35 OR <=
FAD2 CMP #26
FAD4 BEQ NOTON
FAD6 CMP #17
FAD8 BEQ NOTON
FADA CMP #8
FADC BEQ NOTON
FADE CLC
FADF RTS
FAE0 NOTON
FAE0 SEC
FAE1 RTS



;
;;TOSET -- SET UP TOSQRB, MOVFLG, RETURN Y=0, A,X UNCHANGED, EQ
;
FAE2 TOSET
FAE2 LDY MSTJMP ;"FROM"
FAE4 BEQ MV285
FAE6 LDY #JP ;MUST JUMP
FAE8 BNE MV287 ;JMP
FAEA MV285
FAEA LDY #BLANK ;NO JUMP
FAEC MV287
FAEC STY TOSQRB

FAEE LDY #0
FAF0 STY MOVFLG
FAF2 RTS
^L
;
;;TONORM --       GO OUT OF ATTRACT INTO NORMAL MODE [todo - verify indentation]
;
FAF3 TONORM
FAF3 LDY #0 ;CLEAR TIMER
FAF5 STY ATIM
FAF7 DEY ;RETURN Y=$FF
FAF8 STY GFLG2
FAFA RTS


;
;;CRSTUP -- SET UP ACTIVE AND COLORS (COLHUM&COLCMP) (DEPENDS ON RIGHT DIFFICULTY SWITCH)
;
FAFB CRSTUP
FAFB LDY OLDPBQ
FAFD BPL FSET20 ;0 (AM,B,DOWN) => P0 FIRST (ACTIVE)


FAFF LDA #$80 ;COMPUTER STARTS 1 (PRO,A,UP)
FB01 LDX #LIGHT ;HUMAN IS LIGHT
FB03 LDY #DARK ;COMPUTER IS DARK (OR RIGHT HAND PLAYER)
FB05 BNE FSET30 ;JMP
FB07 FSET20
FB07 LDA #0
FB09 LDX #DARK ;HUMAN IS DARK
FB0B LDY #LIGHT ;COMPUTER IS LIGHT (OR RIGHT HAND PLAYER)
FB0D FSET30
FB0D STA ACTIVE
FB0F STX COLHUM
FB11 STY COLCMP
FB13 RTS


;
;;SWIT -- SWITCH ACTIVE PLAYER, RETURN A=ACTIVE
;
FB14 SWIT
FB14 LDA ACTIVE
FB16 EOR #$80
FB18 STA ACTIVE
FB1A RTS
^L

;
;;RESTR6 -- RESTORE A BUNCH OF STUFF INCLUDING FRSMOV
;
FB1B RESTR6
FB1B AND #$C0
FB1D STA FRSMOV
;
;;RESTR4 -- RESTORE BOARD AFTER JUMP
;
FB1F RESTR4
FB1F LDX DEPTH
FB21 LDA OTHER-1,X ;COMPUTE PIECE
FB23 AND #$30
FB25 ORA ACTIVE
FB27 STA PIECE

FB29 LDA OTHER-1,X
FB2B PHA ;CAPTURED PIECCE
FB2C LDA FROMB ;FROM SQUARE
FB2E LDY INDEX
FB30 CLC
FB31 ADC MOVTAB,Y
FB34 TAX ;JUMP SQUARE
FB35 CLC
FB36 ADC MOVTAB,Y
FB39 STA TOSQRB
FB3B PLA
;
;;RESTR5 -- ENTRY POINT
;
FB3C RESTR5
FB3C LDY #2 ;SET UP TO INCREMENT OPPONENT'S PIECE COUNT
FB3E ROL A ;KING?
FB3F LDA #CMPCHK
FB41 BCC NOK ;NO.
FB43 INY ;KING => 3
FB44 LDA #CMPKNG
FB46 NOK
FB46 EOR ACTIVE ;OPPOSITE PLAYER -- JUMPED PIECE
FB48 STA BOARD,X

FB4A AND #$80 ;ACTIVE EOR #$80
FB4C ASL A
FB4D ROL A ;SHIFT AND CLEAR CARRY
FB4E TAX
FB4F TYA
FB50 ADC HPIECE,X
FB52 STA HPIECE,X ;STORE NEW PIECE COUNT

FB54 CPY #3
FB56 BNE NOK10
FB58 INC HKING,X
FB5A NOK10

FB5A LDA MSTFLG
FB5C STA MSTJMP
FB5E LDA MLTFLG ;RESTORE FLAGS
FB60 STA MLTJMP
;
;;RESTOR -- MOVE PIECE BACK & DEC PIECE COUNT IF NEW KING
;
FB62 RESTOR
FB62 LDX TOSQRB
FB64 LDA BOARD,X
FB66 CMP PIECE
FB68 BEQ TERR ;SAME -- NOT NEW KING
FB6A LDA ACTIVE ;MOVE BIT7 TO BIT 1
FB6C ASL A
FB6D ROL A
FB6E TAX
FB6F DEC HPIECE,X
FB71 DEC HKING,X ;DECREMENT KING COUNT
FB73 TERR
FB73 LDX TOSQRB
FB75 LDA #0
FB77 STA BOARD,X ;CLEAR TO SQUARE
FB79 LDX FROMB
FB7B LDA PIECE ;MOVE PIECE TO FROM SQUARE
FB7D STA BOARD,X
FB7F RTS
^L
;
;;JUMP1 -- SETS UP JMPLST IF MULTIPLE JUMP FOR COMPUTER (FOR END OF ALPHA-BETA)
;
;;INPUT: T0 = STARTING SQUARE
;;       Y = INDEX INTO MOVTAB
;;       T1 = CURRENT JMPLST INDEX
;
;;OUTPUT: T0 = ENDING SQUARE (AFTER JUMP_
;;        T1 = T1+1 (OLD T1 IN X)
;;        JMPLST,X = JUMPED PIECE (B7=1 => KING) AND SQUARE
;;        CS = DONE (LAST JUMP)
;
FB80 JUMP1
FB80 LDA T0
FB82 CLC
FB83 ADC MOVTAB,Y
FB86 PHA
FB87 TAX
FB88 LDA BOARD,X ;SAVE JUMP SQUARE

FB8A DEC HPIECE ;DECREMENT HUMAN'S PIECE COUNT
FB8C DEC HPIECE
FB8E CMP #HUMKNG
FB90 BNE NK
FB92 DEC HPIECE ;KING -- DECREMENT AGAIN
FB94 DEC HKING ;DEC KING COUNT
FB96 NK
FB96 PHA ;SAVE JUMPED PIECE
FB97 LDA #0 ;CLEAR OUT JUMP SQUARE
FB99 STA BOARD,X
FB9B PLA

FB9C TAX
FB9D PLA ;JUMP SQUARE
FB9E PHA
FB9F CPX #HUMKNG ;DOES JUMP SQUARE CONTAIN HUMAN KING?
FBA1 BNE JUMPS ;NO.
FBA3 ORA #$80 ;YES. KING
FBA5 JUMPS
FBA5 LDX T1
FBA7 STA JMPLST,X
FBA9 INC T1

FBAB PLA ;RELOAD JUMP SQUARE
FBAC CLC ;COMPUTE TO SQUARE
FBAD ADC MOVTAB,Y
FBB0 STA T0
FBB2 CPX JMPI ;DONE?
FBB4 RTS
^L
;
;;JUMP4 -- SIMILAR TO JUMP1, EXCEPT DOES 4 JUMPS
;
;;INPUT: A = 4 OFFSET INDEX (B7-6 = FIRST)
;;       T0 = START SQUARE (FOR JUMP1)
;;       T1 = JMPLST INDEX (FOR JUMP1)
;
;;USES:  T2 = LOOP COUNT
;;       T3 = INDEXES
;
;;OUTPUT: T0 = END SQUARE, CS=> DONE
;
FBB5 JUMP4
FBB5 STA T3
FBB7 LDA #3
FBB9 STA T2
FBBB JUMPL
FBBB LDA #0
FBBD ASL T3 ;SHIFT 2 BITS OF INDEX FROM MSB'S OF T3 TO LSB'S OF A
FBBF ROL A
FBC0 ASL T3
FBC2 ROL A
FBC3 TAY
FBC4 JSR JUMP1
FBC7 BCS JUMP4 ;BRANCH IF DONE
FBC9 DEC T2
FBCB BPL JUMPL ;CONTINUE
FBCD JUMPR
FBCD RTS
^L
;
;;TERMNODE -- CHECK FOR TERMINAL NODE
;
;;RETURN ACTIVE SWITCHED
;;CC => NOT TERMINAL --  XMOVE, AND MSTJMP SET UP FOR NEXT LEVEL
;;CS => TERMINAL -- NUM = STATIC VALUE OF BOARD
FBCE TERMNODE
FBCE JSR SWIT ;SWITCH ACTIVE PLAYER TO GET ACTIVE FOR NEXT LEVEL
FBD1 JSR JMPCK2 ;CHECK FOR MOVE OR JUMP, SET UP MSTJMP, XMOVE,YMOVE
FBD4 BNE ALP200 ;CAN MOVE

FBD6 LDX DEPTH ;CAN'T MOVE -- VERY BAD
FBD8 TXA
FBD9 CLC
FBDA ADC #2
FBDC STA ALPHAL+1,X
FBDE LDA #$80
FBE0 STA ALPHAH+1,X ;-INFINITY = $8002+DEPTH = -(7FFF - DEPTH-1) (-7FFD TO -7FFE)  ($8003 - $800 [todo - original likely truncated]
FBE2 JMP SED20 ;NEGATE IF LOSING CHECKERS & RETURN CARRY SET
;
;;ALP200 -- ENTRY POINT -- CHECK DEPTH -- WE KNOW WE CAN JUMP.  CS=>TERMINAL NODE
;
FBE5 ALP200 LDA DEPTH
FBE7 CMP #MAXMAX
FBE9 BCC ALP220

FBEB JSR STATEVAL ;"STACK" FULL -- MUST STOP
FBEE LDA MSTJMP
FBF0 BEQ ALP210
;;;;MUST JUMP -- MODIFY VALUE FOR PENDING JUMP
;;;;DECREATE MAGNITUDE OF SCORE.
FBF2 LDY #0 ;ADD NEGATIVE NUMBER
FBF4 LDX DEPTH
FBF6 LDA ALPHAH+1,X
FBF8 BPL ALP205
FBFA LDY #2 ;<0  =>  ADD POSITIVE NUMBER
FBFC ALP205
FBFC LDA ADDTAB,Y ;POS. => -ADDTRM.   NEG => ADDTRM
FBFF CLC
FC00 ADC ALPHAL+1,X
FC02 STA ALPHAL+1,X
FC04 LDA ADDTAB+1,Y ;POS=> $FF.  NEG => 0
FC07 ADC ALPHAH+1,X
FC09 STA ALPHAH+1,X

FC0B ALP210
FC0B SEC
FC0C RTS

FC0D ALP220
FC0D LDX MSTJMP ;MUST JUMP?
FC0F BEQ ALP235 ;NO. BRANCH
FC11 ALP230
FC11 CLC ;YES. CONTINUE TREE SEARCH
FC12 ALP231
FC12 RTS
FC13 ALP235
FC13 LDA GAMNO ;CHECK MAX DEPTH
FC15 AND #$0F
FC17 CMP DEPTH
FC19 BEQ ALP240 ;IF GAMNO = DEPTH THEN STOP UNLESS OTHER PLAYER CAN JUMP
FC1B BCS ALP230 ;IF GAMNO > DEPTH THEN CONTINUE TREE SEARCH
;
;;;;IF GAMNO < DEPTH THEN STOP UNLESS OTHER PLAYER CAN JUMP
;
FC1D ALP240
^L
;; STATEVAL -- COMPUTE STATIC VALUE OF BOARD
;
;;HUMAN ACTIVE => -CPIECE/HPIECE   THEN SHIFT LEFT 4 BITS  (2 BYTE RESULT)
;;COMPUTER ACTIVE => CPIECE/HPIECE
;;RESULT IS TWO BYTES IN NUM & ALPHA(DEPTH+1) (THIS MIGHT REPLACE OLD ALPHA VALUE)
;;NUM = LSB = FRACTIONAL PART.
;;NUM+1 = MSB = INTEGER PART.
;
;;RETURN CARRY SET
;
FC1D STATEVAL
FC1D LDX HPIECE
FC1F LDY CPIECE
FC21 STX DEN ;HUMAN ACTIVE => HPIECE/CPIECE
FC23 STY NUM+1 ;MSB
FC25 LDA #0 ;LSB
FC27 STA NUM
FC29 LDX #17
FC2B CLC
FC2C SELP
FC2C ROL NUM ;LSB
FC2E ROL NUM+1 ;MSB
FC30 DEX
FC31 BEQ SEDONE ;BRANCH IF DONE
FC33 ROL A
FC34 CMP DEN
FC36 BCC SELP ;0
FC38 SBC DEN
FC3A BCS SELP ;DJUMP -- ROTATE IN 1
FC3C SEDONE
FC3C LDA #0
FC3E STA T1 ;INIT CREDIT TO 0

FC40 ASL NUM ;SHIFT LEFT 4 BITS
FC42 ROL NUM+1 ;CHECK FOR OVERFLOW
FC44 ASL NUM
FC46 ROL NUM+1
FC48 ASL NUM
FC4A ROL NUM+1
FC4C ASL NUM
FC4E ROL NUM+1
FC50 BCS SED05 ;OVERFLOW
FC52 BPL SED07 ;NO OVERFLOW
FC54 SED05
FC54 LDA #$FF-MAXMAX-2 ;$F2 IF MAXMAX = 11
FC56 STA NUM
FC58 LDA #$7F ;SET TO MAX MAGNITUDE (-$800E TO ALLOW ROOM FOR DEC)
FC5A STA NUM+1
FC5C JMP ADDSUM ;IGNORE REST OF CREDITS
FC5F SED07
^L
;
;;END GAME CLEAN UP -- DO ONLY IF COMPUTER IS WINNING OR EVEN
;
FC5F LDA #$FF
FC61 STA T7 ;INDICATE NOT END GAME UNTIL PROVEN OTHERWISE

FC63 LDA HPIECE
FC65 SEC ;COMPUTE # OF HUMAN PIECES * 2 = HPIECE-HKING
FC66 SBC HKING
FC68 CMP #ENDPC ;DOES HUMAN HAVE MORE THAN END GAME AMOUNT?
FC6A BCC DIS03
FC6C DIS02
FC6C JMP DIS70 ;YES.  NOT END GAME
FC6F DIS03
FC6F ADC CKING ;NO. ENG GAME. IS COMPUTER AHEAD IN # OF PIECES?
FC71 SEC
FC72 SBC CPIECE
FC74 BCS DIS02 ;SKIP IF HUMAN >= COMPUTER

FC76 DIS04
FC76 LDX #34
FC78 DISLP1
FC78 STX T7 ;SAVE X
FC7A LDA BOARD,X ;EMPTY SQUARE?
FC7C BEQ DIS65 ;YES. TRY NEXT SQUARE

FC7E AND #KING ;KING?
FC80 BNE DIS05 ;YES.  SKIP

FC82 JSR XIE1 ;NO. ORDINARY MAN.  COMPUTE DISTANCE OF MAN FROM BOTTOM OF BOARD
FC85 TXA
FC86 LSR A
FC87 LSR A
FC88 CLC
FC89 ADC T1 ;ADD T1
FC8B STA T1
FC8D LDX T7 ;RELOAD X
FC8F DIS05
FC8F LDA BOARD,X
FC91 BMI DIS65 ;SKIP IF COMPUTER
FC93 JSR XIE1 ;CONVERT INTERNAL SQUARE # TO EXTERNAL
FC96 TXA
FC97 LSR A
FC98 LSR A
FC99 STA T6 ;ROW
FC9B EOR #1 ;COMPLEMENT LSBIT
FC9D ROR A ;AND SHIFT TO CARRY.
FC9E TXA
FC9F ROL A ;SHIFT CARRY INTO B0
FCA0 AND #7 ;AND MASK TO GET COL
FCA2 STA DEN ;COL

FCA4 LDX #34 ;FIND COMPUTER'S PIECES
FCA6 DISLP2
FCA6 LDA BOARD,X
FCA8 BPL DIS60 ;EMPTY OR HUMAN
;;;;CHECK FOR KING?
FCAA TXA ;SAVE INTERNAL SQUARE #
FCAB PHA
FCAC JSR X1E1 ;CONVERT INTERNAL SQUARE # TO EXTERNAL
FCAF TAX
FCB0 LSR A ;COMPUTE ROW
FCB1 LSR A
FCB2 SEC
FCB3 SBC T6 ;COMPUTE DIFFERENCE IN ROWS
FCB5 BPL DIS30
FCB7 EOR #$FF ;MAKE POSITIVE
FCB9 CLC
FCBA ADC #1
FCBC DIS30
FCBC STA T0
FCBE TXA ;COMPUTE DIFFERENCE IN COLS
FCBF LSR A
FCC0 LSR A
FCC1 EOR #1
FCC3 ROR A ;SHIFT TO CARRY
FCC4 TXA
FCC5 ROL A
FCC6 AND #7 ;COL
FCC8 SEC
FCC9 SBC DEN
FCCB BPL DIS40
FCCD EOR #$FF ;MAKE POSITIVE
FCCF CLC
FCD0 ADC #1
FCD2 DIS40
FCD2 CMP T0 ;FIND LARGER OF DIF IN ROWS AND COLS
FCD4 BCS DIS50
FCD6 LDA T0 ;USE FIRST VALUE
FCD8 DIS50
FCD8 CLC ;THIS IS THE DISTANCE BET. THE COMPUTER PIECE & THE HUMAN PIECE
FCD9 ADC T1 ;ADD NEG. # TO CREDIT
FCDB STA T1
FCDD PLA ;RESTORE INTERNAL SQUARE #
FCDE TAX
FCDF DIS60
FCDF DEX
FCE0 BPL DISLP2

FCE2 DIS65
FCE2 LDX T7 ;STOP WHEN T7=0
FCE4 DEX
FCE5 BPL DISLP1

FCE7 LDA NUM ;SUBTRACT CREDIT FROM NUM
FCE9 SEC
FCEA SBC T1
FCEC STA NUM
FCEE BCS DIS67 ;BORROW?
FCF0 DEC NUM+1 ;YES. DECREMENT MSB
FCF2 DIS67
FCF2 LDA #0 ;CLEAR OUT T1
FCF4 STA T1

;
;;COUNT COMPUTER PIECES ON DIAGONAL
;
FCF6 LDY #14-1
FCF8 DIAGLP
FCF8 LDX DIAG,Y
FCFB LDA BOARD,X
FCFD BEQ DIAG20 ;EMPTY
FCFF ROL A
FD00 AND #KING*2 ;KING?
FD02 BEQ DIAG20 ;NO.
FD04 BCC DIAG10 ;YES. BRANCH IF HUMAN
FD06 INC T1 ;COMPUTER
FD08 JMP DIAG20
FD0B DIAG10
FD0B DEC T1 ;HUMAN
FD0D DIAG20
FD0D DEY
FD0E BPL DIAGLP
FD10 DIS70
^L
;
;;COMPUTE BACK ROW CREDIT (KING ROW PROTECTION)
;
FD10 LDA GAMNO
FD12 AND #$0E ;GAME # = 1?
FD14 BNE ADS10 ;NO. SKIP
FD16 BACK25
FD16 JMP ADDSUM ;SKIP THE REST IF GAME # = 1 OR $11
FD19 ADS10

FD19 LDA HKING ;DOES HKING * 3 = HPIECE?
FD1B ASL A ;SHIFT LEFT AND CLEAR CARRY
FD1C ADC HKING
FD1E CMP HPIECE
FD20 BEQ BACK10 ;YES.  => NO ORDINARY MEN TO CONVERT TO KINGS

FD22 LDA #0
FD24 LDY BOARD+31
FD26 BPL BACK30
FD28 ORA #8 ;OR IN 1 BIT FOR EACH BACK ROW SQUARE WHICH IS OCCUPIED BY A COMP PIECE
FD2A BACK30
FD2A LDY BOARD+32
FD2C BPL BACK40
FD2E ORA #4
FD30 BACK40
FD30 LDY BOARD+33
FD32 BPL BACK50
FD34 ORA #2
FD36 BACK50
FD36 LDY BOARD+34
FD38 BPL BACK60
FD3A ORA #1
FD3C BACK60
FD3C TAX
FD3D LDA BAKTAB,X ;ADD TABLE VALUE TO CURRENT CREDIT
FD40 CLC
FD41 ADC T1
FD43 STA T1

FD45 BACK10
FD45 LDA CKING ;DOES CKING*3 = CPIECE?
FD47 ASL A
FD48 ADC CKING
FD4A CMP CPIECE
FD4C BEQ BACK20 ;YES.  NO CHECKERS TO CONVERT TO KINGS

FD4E LDA #0 ;OR IN 1 BIT FOR EACH BACK ROW SQUARE WHICH IS OCCUPIED BY A HUMAN PIECE
FD50 LDY BOARD+3
FD52 BEQ BACK70
FD55 BMI BACK70
FD56 ORA #8
FD58 BACK70
FD58 LDY BOARD+2
FD5A BEQ BACK80
FD5C BMI BACK80
FD5E ORA #4
FD60 BACK80
FD60 LDY BOARD+1
FD62 BEQ BACK90
FD64 BMI BACK90
FD66 ORA #2
FD68 BACK90
FD68 LDY BOARD+0
FD6A BEQ BACK95
FD6C BMI BACK95
FD6E ORA #1
FD70 BACK95
FD70 TAX
FD71 LDA T1
FD73 SEC
FD75 SBC BAKTAB,X ;SUBTRACT TABLE VALUE FROM CURRENT CREDIT
FD77 STA T1

FD79 BACK20
^L
;
;;COMPUTE DOUBLE CORNER CREDIT
;
FD79 LDA GAMNO
FD7B AND #$0F
FD7D CMP #3 ;GAME # = 1 OR 2?
FD7F BCC BACK25 ;JMP ADDSUM IF GAME # TO SMALL

FD81 LDA #HUMKNG
FD83 LDX #-CORN&$FF
FD85 LDY HPIECE
FD87 CPY CPIECE
FD89 BEQ CORN20 ;DO IF EQUAL [todo - penciled in "NOP NOP?"]
FD8B BCC CORN20 ;HUMAN <= COMPUTER ==> HUMAN WANTS CORN
FD8D LDA #CMPKNG ;HUMAN > COMPUTER =>COMPUTER WANTS CORN
FD8F LDX #CORN ;INC ALPHA
FD91 CORN20
FD91 STA DEN ;HUMAN OR COMPUTER
FD93 STX T0 ;-CORN OR +CORN
FD95 LDY #0
FD97 LDA BOARD+0 ;IS SQUARE OCCUPIED?
FD99 BEQ CORN30 ;NO. EMPTY
FD9B EOR DEN ;CORRECT PLAYER AND KING?
FD9D BNE CORN50 ;NO. OTHER PLAYER -- TOO BAD
FD9F INY ;YES. INC CORN COUNT
FDA0 CORN30
FDA0 LDA BOARD+4 ;CHECK OTHER SQUARE IN THIS CORNER
FDA2 BEQ CORN40 ;EMPTY
FDA4 EOR DEN
FDA6 BNE CORN50 ;WRONG PLAYER -- TOO BAD
FDA8 INY
FDA9 CORN40
FDA9 CPY #1
FDAB BNE CORN50
FDAD LDA T1
FDAF CLC
FDB0 ADC T0 ;WE GET CREDIT
FDB2 STA T1
FDB4 CORN50
FDB4 LDY #0 ;CHECK OTHER CORNER
FDB6 LDA BOARD+30 ;IS SQUARE OCCUPIED?
FDB8 BEQ CORN60 ;NO. EMPTY
FDBA EOR DEN ;CORRECT PLAYER AND KING?
FDBC BNE CRN100 ;NO. TOO BAD
FDBE INY
FDBF CORN60
FDBF LDA BOARD+34
FDC1 BEQ CORN70 ;NO. EMPTY
FDC3 EOR DEN ;CORRECT PLAYER AND KING?
FDC5 BNE CRN100 ;NO.
FDC7 INY
FDC8 CORN70
FDC8 CPY #1
FDCA BNE CRN100
FDCC LDA T1
FDCE CLC
FDCF ADC T0
FDD1 STA T1
FDD3 CRN100

;
;;COMPUTE CENTER CREDIT
;
FDD3 DOCENT
FDD3 LDA T7
FDD5 BEQ CENT90 ;SKIP IF END GAME
FDD7 LDA BOARD+19 ;COUNT EACH COMPUTER PIECE IN SQUARES 19&20
FDD9 BPL CENT50
FDDB INC T1
FDDD CENT50
FDDD LDA BOARD+20
FDDF BPL CENT90
FDE1 INC T1
FDE3 CENT90
^L
;
;;COMPUTE MOVE CREDIT (ADD CREDIT IF COMPUTER HAS MOVE)
;
FDE3 LDA GAMNO
FDE5 AND #$0C ;GAME # < 4?
FDE7 BEQ ADDSUM ;YES. SKIP
FDE9 LDA HPIECE
FDEB CLC
FDEC ADC CPIECE
FDEE CMP #24+1 ;TOTAL PIECE COUNT > 24?
FDF0 BCS QMV100 ;YES. SKIP MOVE

FDF2 LDA HPIECE ;SUBTRACT OFF EXTRA POINT FOR EACH KING TO GET
FDF4 SEC ;2 TIMES PIECE COUNT FOR EACH PLAYER
FDF5 SBC HKING
FDF7 SEC
FDF8 SBC CPIECE ;HPIECE-HKING-CPIECE+CKING
FDFA CLC ;=HPIECE-HKING-(CPIECE-CKING)
FDFB ADC CKING
FDFD BNE QMV100 ;PIECE COUNTS ARE DIFFERENT

;
;;COUNT PIECES IN COMPUTER'S SYSTEM
;
FDFF LDY #16-1
FE01 LDA #0 ;INIT COUNT
FE03 STA T0
FE05 QMVLP
FE05 LDX SYSTEM,Y
FE08 LDA BOARD,X
FE0A BEQ QMV10
FE0C INC T0
FE0E QMV10
FE0E DEY
FE0F BPL QMVLP

FE11 ROR T0 ;ODD OR EVEN?
FE13 ROR A
FE14 EOR ACTIVE ;COMPUTER OR HUMAN ACTIVE?
FE16 BMI QMV100 ;HUMAN HAS MOVE -- DON'T ADD CREDIT
FE18 INC T1 ;HUMAN IS ACTIVE AND EVEN COUNT
FE1A QMV100
^L
;
;;ADD SUM OF BACK, CORN, ETC. IN T1 TO PIECE COUNT RATIO IN NUM
;
FE1A ADDSUM
FE1A LDX DEPTH
FE1C LDA T1
FE1E CLC
FE1F ADC NUM
FE21 STA ALPHAL+1,X
FE23 LDA #0 ;COMPUTE MSB
FE25 LDY T1 ;NEGATIVE?
FE27 BPL ADD10 ;NO. POSITIVE. USE 0
FE29 LDA #$FF ;YES.  USE $FF
FE2B ADD10
FE2B ADC NUM+1 ;ADD WITH CARRY FROM LSB
FE2D STA ALPHAH+1,X ;SHOULD NEVER GET OVERFLOW

FE2F LDA ACTIVE ;HUMAN ACTIVE?
FE31 BMI SED20 ;NO.
FE33 LDA GAMNO
FE35 CMP #PLAY2 ;LOSING CHECKERS?
FE37 BCC SED25 ;NO. WINNING CHECKERS -- NEGATE ALPHA
FE39 RTS ;YES. DOUBLE NEGATE => NO NEGATE.  RETURN CARRY SET
;
;;IF LOSING CHECKERS (GAMES > 2-PLAYER GAME) THEN NEGATE ALPHA -- ENTRY POINT
;
;;RETURN CARRY SET
;
FE3A SED20
FE3A LDX DEPTH
FE3C LDA GAMNO
FE3E CMP #PLAY2
FE40 BCC SED30
FE42 SED25
FE42 SEC ;LOSING CHECKERS
FE43 LDA #0
FE45 SBC ALPHAL+1,X
FE47 STA ALPHAL+1,X
FE49 LDA #0
FE4B SBC ALPHAH+1,X
FE4D STA ALPHAH+1,X
FE4F SED30
FE4F SEC ;RETURN CARY SET (FOR TERMNODE)
FE50 RTS
^L
;
;;CHGCNT -- CHANGE PIECE COUNT TO REFLECT OPPONENT'S JUMPED PIECE
;
FE51 CHGCNT
FE51 LDY #-2&$FF ;DECREASE OPPONENT'S PIECE COUNT FOR JUMPED PIECE
FE53 TAX ;KING?
FE54 BPL AJ10 ;NO.
FE56 DEY ;YES. USE -3
FE57 AJ10
FE57 LDA ACTIVE
FE59 EOR #$80 ;OPPONENT
FE5B ASL A
FE5C ROL A ;SHIFT CLEARS CARRY
FE5D TAX
FE5E TYA
FE5F ADC HPIECE,X
FE61 STA HPIECE,X

FE63 CPY #-3&$FF
FE65 BNE AJ15
FE67 DEC HKING,X ;DECREMENT KING COUNT BECAUSE KING WAS CAPTURED
FE69 AJ15
FE69 RTS
;
;;JMPSV2 -- SAVE MOVE IN JMPLST (COMPACTED FORMAT FOR ALPHA-BETA)
;
FE6A JMPSV2
FE6A LDY #0 ;YES. SAVE FIRST MOVE IN JMPLST
FE6C LDX DEPTH ;1-9
FE6E DEX
FE6F BNE WASJ18

FE71 LDA INDEX ;DEPTH=1
FE73 LSR A
FE74 ROR A
FE75 ROR A
FE76 ORA FROMB
FE78 STA JMPLST
FE7A RTS
FE7B WASJ18
FE7B DEX ;DEPTH-2  (0-7)
FE7C TXA
FE7D PHA
FE7E LSR A
FE7F LSR A ;0 OR 1
FE80 TAX
FE81 INX ;1 OR 2
FE82 PLA
FE83 AND #3 ;0-2
FE85 TAY

FE86 LDA INDEX
FE88 STY T0
FE8A WASJLP
FE8A CPY #3 ;DONE?
FE8C BCS WASJ90 ;YES.
FE8E ASL A ;NO.  SHIFT LEFT 2 MORE BITS
FE8F ASL A
FE90 INY
FE91 BCC WASJLP ;JMP
FE93 WASJ90
FE93 LDY T0
FE95 EOR JMPLST,X
FE97 AND MSKLST,Y ;COMBINE WITH JMPLST (C0,30,0C,03)
FE9A EOR JMPLST,X
FE9C STA JMPLST,X
FE9E RTS
;
;;JMPSAV -- SAVE VARIABLES FOR JUMP & INC DEPTH
;
FE9F JMPSAV
FE9F LDA JMPSQR
FEA1 AND #$C0 ;JUMPED PIECE
FEA3 ORA MSTFLG
FEA5 ORA MLTFLG
FEA7 ORA INDEX
FEA9 EOR PIECE
FEAB AND #$CF ;COMBINE A WITH BITS 5-4 OR PIECE (KING OR CHECKER)
FEAD EOR PIECE

;
;;SAVE1 -- ENTRY POINT
;
FEAF SAVE1
FEAF INC DEPTH
FEB1 LDX DEPTH
FEB3 STA OTHER-2,X
FEB5 LDA FROMB
FEB7 ORA FRSMOV
FEB9 STA FROMT-2,X
FEBB RTS
^L

;
;;KNGCK2 -- RETURN CS IF NEW KING ON SQUARE X(0-34), A=CONTENTS OF SQUARE X
;;          INC CPIECE OR HPIECE IF NEW KING
;
FEBC KNGCK2
FEBC CMP #CMPCHK
FEBE BNE TO60
FEC0 CPX #4 ;COMPUTER CHECKER TO KING OF ON 0-3
FEC2 BCS T080 ;NOT NEW KING
FEC4 INC CPIECE ;INCREMENT COMPUTER PIECE COUNT
FEC6 INC CKING ;INC KING COUNT
FEC8 BCC TO70 ;JMP    NEW KING
FECA TO60
FECA CMP #HUMCHK
FECC BNE TO80
FECE CPX #31 ;HUMAN CHECKER TO KING IF ON 31-34
FED0 BCC TO80
FED2 INC HPIEVE ;INCREMENT HUMAN PIECE COUNT FOR NEW KING
FED4 INC HKING ;INC KING COUNT
FED6 TO70
FED6 AND #$80
FED8 ORA #KING
FEDA SEC
FEDB RTS
FEDC TO80
FEDC CLC
FEDD RTS
;
;;TOMOV -- CALL TOSET, MOVCLR
;
FEDE TOMOV
FEDE JSR TOSET
;
;;MOVCLR -- SET MOVE TO 8 (OFF BOARD SQUARE), SET MOVVAL TO 0
;;          RETURN Y=0
;
FEE1 MOVCLR
FEE1 LDY #8
FEE3 STY MOVE
FEE5 LDY #0
FEE7 STY MOVVAL
FEE9 RTS

;;;        RANDOM MOVE TABLE -- INDEXED BY PRNCNT [todo - verify indentation]
;;;1/2,1/3,1/4,1/5,1/6,1/7
FEEA RANTAB .BYTE $80,$55,$40,$33,$2B,$25
FEED

FEF0 .BYTE 0 ;EXTRA BYTE
.IF PAL-1
FEF1 .BYTE 0,0,0,0,0,0,0,0 ;MORE EXTRA BYTES IF NOT PAL
FEF4
FEF7
FEF9 .BYTE 0,0,0,0,0,0,0
FEFC
FEFF
.ENDIF

.IF PRNT
AD=*
.ENDIF
^L
;;;DATA [todo - verify indentation]
*=ROMSTR+$F00
;;;;BOARD CHARACTERS (IN UPSIDE DOWN ORDER)
FF00 BRDCHR
%rcomment 8
FF00 00 00 00 .BYTE 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ;EMPTY 0*LINCHR [todo - indentation changes with long lines]
FF03 00 00 00
FF06 00 00 00
FF09 00 00 00
FF0C 00 00 00
FF0F 00
FF10 3C 3C 7E .BYTE $3C,$3C,$7E,$7E,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$8E,$8E,$3C,$3C ;CHECKER 1
FF13 7E FF FF
FF16 FF FF FF
FF19 FF FF FF
FF1C 7E 7E 3C
FF1F 3C
FF20 3C 3C 7E .BYTE $3C,$3C,$7E,$7E,$C3,$C3,$C3,$C3,$A5,$A5,$A5,$E7,$7E,$7E,$3C,$3C ;KING 2
FF23 7E C3 C3
FF26 C3 C3 A5
FF29 A5 A5 E7
FF2C 7E 7E 3C
FF2F 3C
%rcomment 7
FF30 00 00 00 .BYTE 0,0,0,$C6,$C6,$6C,$6C,$38,$38,$6C,$6C,$C6,$C6,0 ;CURSOR 3
FF33 C6 C6 6C
FF36 6C 38 38
FF39 6C 6C C6
FF3C C6 00
%rcomment 3
FF3E 00 00 HTAB .BYTE 0,0 ;CHANGES FOR HPIECE (BASED ON NXTAB). 0,0 IS PART OF CURSOR
FF40 FD 01 02 CTAB .BYTE -3,1,2 ;PART OF HTAB
FF43 00 00 HKTAB .BYTE 0,0 ;CHANGES FOR HKING (KING COUNT). 0,0 IS PART OF CTAB
FF45 FF 01 00 CKTAB .BYTE -1,1,0,0,0 ;CHANGES FOR CKING. -1,1,0 IS PART OF HKTAB
FF48 00 00
FF4A C0 30 0C MSKLST .BYTE $C0,$30,$0C,$03 ;MASKS FOR DIFFERENT 2 BIT COMBOS -- USED IN JMPSV2
FF4D 03
;;;;NEXT CURSOR VALUES FOR SETUP
%rcomment 4
FF4E A0 90 20  NXTAB .BYTE CMPKNG,CMPCHK,HUMKNG,HUMCHK ;EMPTY
%rcomment 3
FF51 10
;;BAKTAB -- LIST OF BACK ROW CREDITS
;;0=>     NO PIECE IN BACK ROW
;;1=>     1 PIECE IN BACK ROW (OR 31 AND 32)
;;2=>     2 PIECES IN BACK ROW (NOT 34)
;;3=>     ANY 2 AS LONG AS 34
;;4=>     ALL BUT 34
;;5=>     ALL BUT 32
;;6=>     32 AND 34 (AND MAYBE OTHERS)
;
;;FIRST 0 IS PART OF NXTAB
;;SELECT BY DETERMINING 32,32,33,34 OR 3,2,1,0
^L
FF52 00 02 02 BAKTAB .BYTE 0*2,1*2,1*2,3*2,1*2,6*2,2*2,6*2,1*2,3*2,4*2,5*2,1*2,6*2,4*2,6*2
FF55 06 02 0C
FF58 04 0C 02
FF5B 06 08 0A
FF5E 02 0C 08
FF61 0C
FF62 05 90 06 JOYTAB .BYTE 5,9,6,$A ;JOYSTICK READINGS FOR DIAGONAL MOVEMENT.
FF65 0A
;;        MOVTAB & MVTAB2 GO TOGETHER -- DO NOT SEPARATE!!!
;;HUMAN CHECKER CAN'T DO 0,1; COMPUTER CHECKER CAN'T DO 2,3.
;
VV FF66 FB FC 04 MOVTAB .BYTE RB,LB,RF,LF ;OFFSETS FOR DIAGONAL MOVEMENT (RELATED TO JOYTAB) [todo - "VV" in left margin]
FF69 05
VV FF6A F6 F8 08 MVTAB2 .BYTE 2*RB,2*LB,2*RF,2*LF ;OFFSETS FOR JUMPS
FF6D 0A
;;LIST OF FIRST MOVES
%rcomment 7
FF6E 59 19 58 FRSTAB .BYTE $40+25,$00+25,$40+24,$00+24,$40+23,$40+22,$40+23 ;USE 23 FROM SYSTEM
FF71 18 57 56
FF74 57
;;COMPUTER'S MOVE SYSTEM (INTERNAL NUMBERING)
%rcomment 4
FF75 17 06 07 SYSTEM .BYTE 23,6,7,13,16,22,31,32,33 ;23 IS PART OF FRSTAB
FF78 0D 10 16
FF7B 1F 20 21
;;SQUARES ON DIAGONAL BETWEEN DOUBLE CORNERS
%rcomment 5
FF7E 04 05 0E DIAG .BYTE 4,5,14,15,24,25,34 ;PART OF SYSTEM ALSO
FF81 0F 18 19
FF84 22
FF85 00 09 0A .BYTE 0,9,10,19,20,29,30 ;REST OF DIAG
FF88 13 14 1D
FF8B 1E
;;"SCORE" TABLE -- CHARACTERS 0-9, BLANK, JP
;;MUST NOT CROSS PAGE BOUNDARY -- THIS INCLUDES BOTH LISTING PAGE & RAM PAGE [todo - verify in code]
FF8C SCRTBL
%rcomment 3
FF8C 0E 0A 0A .BYTE $0E,$0A,$0A,$0A,$0E ;0    HIGH ORDER 0 IS DISPLAYED AS BLANK
FF8F 0A 0E
FF91 EE 44 44 .BYTE $EE,$44,$44,$CC,$44 ;1
FF94 CC 44
FF96 EE 88 EE .BYTE $EE,$88,$EE,$22,$EE ;2
FF99 22 EE
FF9B EE 22 66 .BYTE $EE,$22,$66,$22,$EE ;3
FF9E 22 EE
FFA0 22 22 EE .BYTE $22,$22,$EE,$AA,$AA ;4
FFA3 AA AA
FFA5 EE 22 EE .BYTE $EE,$22,$EE,$88,$EE ;5
FFA8 88 EE
FFAA EE AA EE .BYTE $EE,$AA,$EE,$88,$EE ;6
FFAD 88 EE
FFAF 22 22 22 .BYTE $22,$22,$22,$22,$EE ;7
FFB2 22 EE
FFB4 EE AA EE .BYTE $EE,$AA,$EE,$AA,$EE ;8
FFB7 AA EE
FFB9 EE 22 EE .BYTE $EE,$22,$EE,$AA,$EE ;9
FFBC AA EE
FFBE 00 00 00 .BYTE 0,0,0,0,0 ;AA     BLANK [todo - verify spacing]
FFC1 00 00
FFC3 E4 A4 27 .BYTE $E4,$A4,$27,$25,$27 ;BB     JP
FFC6 25 27
^L
V FFC8 E0 FF 20 ADDTAB .BYTE -ADDTRM,$FF,ADDTRM ;TERMS TO ADD IN TERMNODE IF FULL & PENDING JMP
;;;USE 0 FROM COLTB FOR END OF ADDTAB [todo - check indentation]
%rcomment 6
FFCB 00 34 36 COLTB .BYTE EDARK,ELIGHT,ELIAT,HDARK,HLIGHT,HLIAT ;COLORS FOR DIFFERENT SQUARES & EASY OR HARD [todo - maybe truncated]
FFCE B0 26 26
%rcomment 2
^L
;
;;TOSUB -- SUBROUTINE TO DO JUNK FOR TO CODE
;
FFD1 TOSUB
FFD1 LDX MOVE ;MOVE TO NEW SQUARE FOR MOVCHK
FFD3 LDA PIECE
FFD5 JSR KNGCHK ;NEW KING?
FFD7 STA PIECE
FFDA STA BOARD,X
FFDC STA MOVVAL
FFDE RTS
;
;;KNGCHK -- SAME AS KNGCK2 EXCEPT USES Y TO SET MSTJMP TO 0 IF NEW KING
;
FFDF KNGCHK
FFDF JSR KNGCK2
FFE2 BCC TO81
FFE4 LDY #0
FFE6 STY MSTJMP
FFE8 TO81
FFE8 RTS
;
;;SOUND0-SOUND3 -- SET UP SOUND REGISTERS
;
FFE9 SOUND0
FFE9 LDA #DROP ;AUDF0
FFEB SOUND1
FFEB LDY #PURE ;AUDC0
FFED SOUND2
FFED LDX #$0F ;AUDV0 -- MAX VOL
FFEF SOUND3
FFEF STA AUDF0
FFF1 STX AUDV0
FFF3 STX AUDC0
FFF5 RTS

FFF6 00 00 .BYTE 0,0 ;EXTRA BYTES

FFF8 00 00 00 .BYTE 0,0,0,0 ;MORE EXTRA BYTES
FFFB 00


*=ROMSTR+$FFFC
FFCC 00 F1 .WORD PSTART ;START VECTOR
FFFE 00 00 .BYTE 0,0 ;EXTRA BYTES
^L
;
;;THE FOLLOWING CODE IS FOR DEBUGGING ONLY.
;;IT IS NOT TO BE INCLUDED IN THE FINAL CARTRIDGE.
;;THESE SUBROUTINES USE THE KIM MONITOR ROUTINES TO PRINT VARIOUS
;;INFORMATION ON THE TI TERMINAL CONNECTED TO THE DEVELOPMENT SYSTEM.
;
.IF PRNT
*=AD

*=*-1/256+1/256
;
;;PRMOVE -- PRINT FROMB-TOSQRB
;
PRMOVE
LDX PRFLG ;PRINT FLAG SET?
BEQ PRRTN ;NO. DON'T PRINT
DEC PRCNT ;PRINT 10 MOVES TO THE LINE
BPL PRMV10
JSR CRLF
LDA #10-1
STA PRCNT
PRMV10
LDX FROMB ;YES.
JSR IEDSP ;PRINT FROM SQUARE #
JSR PRTBYT
;
;;PRTO -- PRINT TO SQUARE
;
PRTO
LDA PRFLG ;PRINT FLAG SET?
BEQ PRRTN ;NO. DON'T PRINT
LDA #'- ;YES. PRINT '-'
JSR OUTCH
LDX TOSQRB ;PRINT TO
TXA
BMI PROT1 ;SKIP IF TO = BLANK (AA) OR JP (BB)
JSR IEDSP ;CONVERT FROM INTERNAL TO EXTERNAL NUMBERING
PROT1
JSR PRTBYT
JMP OUTSP

PRRTN
RTS
;
;;PRBRD -- PRINT ENTIRE BOARD & OTHER INFO
;
PRBRD
LDA PRFLG ;PRINT FLAG SET?
BEQ PRRTN ;NO. DON'T PRINT
LDA #0 ;YES. TURN OFF SOUND, IF ANY
STA AUDV0
JSR CRLF ;YES. PRINT CR

LDA #GAMMSG ;PRINT "GAME NUMBER ="
JSR OUTAL3
LDA GAMNO
JSR PRTBYT
JSR CRLF

LDA #BLKMSG ;"COMPUTER IS DARK"
LDX COLCMP
CPX #DARK
BEQ AXB
LDA #WHMSG ;"COMPUTER IS WHITE"
AXB
JSR OUTMSG ;PRINT MSG WITH CR
LDX #B112 ;"DARK STARTS ON 1-12" (IF COLOR)
LDA OLDPBQ
AND #8
BNE AXC ;COLOR
LDX #W112 ;B/W "WHITE STARTS ON 1-12"
AXC
TXA
JSR OUTMSG ;PRINT MSG WITH CR
LDA #TOPLFT ;"TOP LEFT SQUARE IS"

JSR OUTMS2 ;PRINT MSG WTIHOUT CR
LDX #34
JSR IEDSP ;COMPUTE TOP LEFT SQUARE # IN EXTERNAL FORM
JSR PRTBYT

JSR CRLF ;PRINT BOARD
LDX #34
JSR PR2ROW
JSR PR2ROW
JSR PR2ROW
JSR PR2ROW
PRBD70
JMP CRLF

;
;;PR2ROW -- PRINT 2 ROWS AND DECREMENT X
;
PR2ROW
JSR BL2 ;2 BLANK SPACES
JSR PRROW
JSR PRROW
DEX
RTS
;
;;BL2 -- PRINT TWO SPACES
;
BL2
TXA
PHA
JSR OUTSP
JSR OUTSP
PLA
TAX
RTS
;
;;PRROW -- PRINT ONE ROW (4 PIECES) & CR
;
PRROW JSR PRPIEC
JSR BL2
JSR PRPIEC
JSR BL2
JSR PRPIEC
JSR BL2
JSR PRPIEC
TXA
PHA
JSR CRLF
PLA
TAX
RTS
;
;;PRPIEC -- PRINT ONE PIECE (OR -- IF EMPTY)
;
PRPIEC TXA
PHA
LDA BOARD,X
BNE PRP10
LDA #'- ;EMPTY
JSR OUTCH
LDA #'-
JSR OUTCH
JMP PRP40
PRP10
PHA ;NOT EMPTY
LDX #' 
TAY
BMI PRP20 ;COMPUTER -- PRINT SPACE
LDX #'H ;HUMAN -- PRINT "H"
PRP20
TXA
JSR OUTCH
LDX #'1
PLA
AND #$7F
CMP #KING ;CHECKER = 1
BNE PRP30 ;KING = 2
INX
PRP30
TXA
JSR OUTCH
PRP40
PLA
TAX
DEX
RTS
;
;;OUTMS2 -- PRINT STRING AT MESSAG/256*256+A ON TI WITH NO CR
;
OUTMS2
LDY PRFLG ;PRINT FLAG SET?
BEQ PRRTN2 ;NO. DON'T PRINT
TAX
LDA T0 ;SAVE T0,T0+1
PHA
LDA T0+1
PHA
STX T0 ;MESSAGE ADR LSB
LDA #MESSAG/256 ;MESSAGE ADR MSB
STA T0+1
JSR OUTM3
TAX
PLA ;RESTORE T0,T0+1
STA T0+1
PLA
STA T0
TXA
PRRTN2
RTS
;
;;OUTMSG -- SAME AS OUTMS2 EXCEPT DO CR
;
OUTMSG
LDY PRFLG
BEQ PRRTN2
JSR OUTMS2
JMP CRLF
;
;;PRMB -- INPUT:  Y=LSB OF ADDR OF MESSAGE TO BE PRINTED
;;                X=ADDR OF RAM PAGE ZERO VAR TO BE PRINTED
;;        OUTPUT: X RESTORED, A,Y MODIFIED
;
PRMB
TXA
PHA
TYA
JSR OUTMS2
PLA
PHA
JSR PRTBYT
JSR OUTSP
PLA
TAX
RTS
;
;;BLECCH -- CALL OUTALP, THEN PRALL
;
BLECCH
LDY DEPTH
CPY PRDEP
BCS PRRTN2
JSR OUTALP
;
;;PRALL -- PRINT A BUNCH OF JUNK FOR ALPHA-BETA PRUNING DEBUG
;
PRALL
JSR PRMOVE
LDX DEPTH
LDY #QDEPTH
JSR PRMB
LDX ACTIVE
LDY #QACTIVE
JSR PRMB
JSR OUTSP

LDX DEPTH
LDA ALPHAH-1,X
JSR PRTBYT
LDX DEPTH
LDA ALPHAL-1,X
JSR PRTBYT
JSR OUTSP

LDX DEPTH
LDA ALPHAH,X
JSR PRTBYT
LDX DEPTH
LDA ALPHAL,X
JSR PRTBYT
JSR OUTSP

LDX DEPTH
LDA ALPAH+1,X
JSR PRTBYT
LDX DEPTH
LDA ALPHAL+1,X
JSR PRTBYT
JSR OUTSP

JSR CRLF
LDA PRDEP
CMP #4
BCC PRA20
LDX DEPTH
CPX #2
BEQ PRA10
CPX #1
BNE PRA20
JSR CRLF ;2 SPACES IF LEVEL 1
PRA10
JSR CRLF ;1 SPACE IF LEVEL 2
PRA20
RTS
;
;;OUTAL3 -- OUTPUT MSG A WITHOUT CR
;
OUTAL3
LDY #MJ/256
STA T0
STY T0+1
;
;;OUTM3 -- MESSAGE PRINTING LOOP
;
OUTM3
LDY #0
TYA
PHA
OUTM10
LDA (T0),Y
BEQ OUTM20 ;END OF MESSAGE IS INDICATED BY A 0 BYTE
JSR OUTCH
PLA
TAY
INY
TYA
PHA
BNE OUTM10 ;JMP
OUTM20
PLA
RTS
;
;;OUTALP -- OUTPUT MESSAGE A WITH CR
;
OUTALP
JSR OUTAL3
JMP CRLF
;
;;PASK -- INPUT NEW PRFLG AND PRDEP FROM TI
;
PASK
LDA #1
STA PRFLG
JSR CRLF
LDA #PRMSG
JSR OUTMS2
JSR GETBYT
PHA
JSR CRLF
LDA #PRDMSG
JSR OUTMS2
JSR GETBYT
STA PRDEP
PLA
STA PRFLG
JMP CRLF
;
;;PRMOV2 -- SIMILAR TO PRMOVE
;
PRMOV2
LDA CURSOR
STA FROMB
LDA PRFLG
AND #$FE ;DO CR'S IF PRINTING ALPHA-BETA JUNK
BEQ JOY800
JSR CRLF
JSR CRLF
JSR PRMOVE
JSR CRLF
JSR CRLF
LDX MOVE
RTS
JOY800
JSR PRMOVE
LDX MOVE
RTS
.PAGE

*=*-1/256+1*256 ;GO ON TO NEXT PAGE BOUNDARY
MESSAG
PRMSG .BYTE "ENTER PRFLG?",0
PRDMSG .BYTE "ENTER PRDEP?",0
GAMOVR .BYTE "GAME OVER",0
BLKMSG .BYTE "COMPUTER IS DARK",0
WHMSG .BYTE "COMPUTER IS WHITE",0
B112 .BYTE "DARK STARTS ON 1-12",0
W112 .BYTE "WHITE STARTS ON 1-12",0
TOPLFT .BYTE "TOP LEFT SQUARE IS ",0
.PAGE
JLERR .BYTE "JOYLP ERROR",0
QDEPTH .BYTE "DEPTH=",0
QINDEX .BYTE "INDEX=",0
QALPHA .BYTE "ALPHA(DEPTH)=",0
QBETA .BYTE "ALPHA(DEPTH-1)=",0
QALP1 .BYTE "ALPHA(DEPTH+1)=",0
QHPIECE .BYTE "HPIECE=",0
QCPIECE .BYTE "CPIECE=",0
QACTIVE .BYTE "ACTIVE=",0
.PAGE

*=*-1/256+1*256
MJ .BYTE "MULTIPLE JUMP ",0
MJBA .BYTE "FRSMOV & BETTER ALPHA",0
WA .BYTE "WORSE ALPHA",0
PRUNE .BYTE "PRUNE",0
BANFM .BYTE "BETTER ALPHA NOT FRSMOV",0
.PAGE
GAMMSG .BYTE "GAME NUMBER=",0
RAN .BYTE "RANDOM ",0



*=*-1/256+1/256
;
;;PRINTING VARS FOR DEBUG
;
PRCNT
*=*+1 ;COUNT OF NUMBER OF MOVES PRINTED ON A LINE
PRFLG
*=*+1 ;PRINTING FLAG
PRDEP
*=*+1 ;MAX DEPTH TO BE PRINTED+1
.ENDIF
.END
^L
%plain
         SYMBOL TABLE [todo - generate & format from asm output]
AB10    F4F6    AB20    F4FE    AB30    F500    AB50    F2CD
ABD2    F50A    ABDONE  F515    ABRET1  F51E    ABRET2  F3C4
ACTIVE  00BB    ADD10   FE2B    ADDSUM  FE1A    ADDTAB  FFC8
ADDTRM  0020    ADS10   FD19    AJ05    F333    AJ10    FE57
AJ15    F369    AJUMP   F328    ALJ     F4E1    ALOOP1  F2D7

